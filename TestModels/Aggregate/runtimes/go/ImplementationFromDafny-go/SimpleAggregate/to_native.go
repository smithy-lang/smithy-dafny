// Code generated by smithy-go-codegen DO NOT EDIT.

package SimpleAggregate

import (
	"github.com/dafny-lang/DafnyRuntimeGo/dafny"
	"github.com/smithy-lang/smithy-dafny/TestModels/Aggregate/SimpleAggregateTypes"
)

func GetAggregateInput_FromDafny(dafnyInput SimpleAggregateTypes.GetAggregateInput) SimpleAggregateTypes.GetAggregateInput_smithygenerated {

	return SimpleAggregateTypes.GetAggregateInput_smithygenerated{SimpleStringList: func() []string {
		var fieldValue []string
		if dafnyInput.Dtor_simpleStringList().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_simpleStringList().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, func() string {
				var s string
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return s
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}())
		}
		return fieldValue
	}(), StructureList: func() []SimpleAggregateTypes.StructureListElement_smithygenerated {
		var fieldValue []SimpleAggregateTypes.StructureListElement_smithygenerated
		if dafnyInput.Dtor_structureList().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_structureList().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, SimpleAggregateTypes.StructureListElement_smithygenerated{StringValue: func() *string {
				var s string
				if val.(SimpleAggregateTypes.StructureListElement).Dtor_stringValue().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(val.(SimpleAggregateTypes.StructureListElement).Dtor_stringValue().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), IntegerValue: func() *int32 {
				var b int32
				if val.(SimpleAggregateTypes.StructureListElement).Dtor_integerValue().UnwrapOr(nil) == nil {
					return nil
				}
				b = val.(SimpleAggregateTypes.StructureListElement).Dtor_integerValue().UnwrapOr(nil).(int32)
				return &b
			}()})
		}
		return fieldValue
	}(), SimpleStringMap: func() map[string]string {
		var m map[string]string = make(map[string]string)
		if dafnyInput.Dtor_simpleStringMap().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_simpleStringMap().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[func() string {
				var s string
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return s
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = func() string {
				var s string
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1))); ; {
					val, ok := i()
					if !ok {
						return s
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()
		}
		return m
	}(), SimpleIntegerMap: func() map[string]int32 {
		var m map[string]int32 = make(map[string]int32)
		if dafnyInput.Dtor_simpleIntegerMap().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_simpleIntegerMap().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[func() string {
				var s string
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return s
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = func() int32 {
				var b = (*val.(dafny.Tuple).IndexInt(1)).(int32)
				return b
			}()

		}
		return m
	}(), NestedStructure: &SimpleAggregateTypes.NestedStructure_smithygenerated{StringStructure: &SimpleAggregateTypes.StringStructure_smithygenerated{Value: func() *string {
		var s string
		if dafnyInput.Dtor_nestedStructure().UnwrapOr(nil).(SimpleAggregateTypes.NestedStructure).Dtor_stringStructure().UnwrapOr(nil).(SimpleAggregateTypes.StringStructure).Dtor_value().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyInput.Dtor_nestedStructure().UnwrapOr(nil).(SimpleAggregateTypes.NestedStructure).Dtor_stringStructure().UnwrapOr(nil).(SimpleAggregateTypes.StringStructure).Dtor_value().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()}}}

}

func GetAggregateOutput_FromDafny(dafnyOutput SimpleAggregateTypes.GetAggregateOutput) SimpleAggregateTypes.GetAggregateOutput_smithygenerated {

	return SimpleAggregateTypes.GetAggregateOutput_smithygenerated{SimpleStringList: func() []string {
		var fieldValue []string
		if dafnyOutput.Dtor_simpleStringList().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_simpleStringList().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, func() string {
				var s string
				for i := dafny.Iterate(val); ; {
					val, ok := i()
					if !ok {
						return s
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}())
		}
		return fieldValue
	}(), StructureList: func() []SimpleAggregateTypes.StructureListElement_smithygenerated {
		var fieldValue []SimpleAggregateTypes.StructureListElement_smithygenerated
		if dafnyOutput.Dtor_structureList().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_structureList().UnwrapOr(nil).(dafny.Sequence)); ; {
			val, ok := i()
			if !ok {
				break
			}
			fieldValue = append(fieldValue, SimpleAggregateTypes.StructureListElement_smithygenerated{StringValue: func() *string {
				var s string
				if val.(SimpleAggregateTypes.StructureListElement).Dtor_stringValue().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(val.(SimpleAggregateTypes.StructureListElement).Dtor_stringValue().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), IntegerValue: func() *int32 {
				var b int32
				if val.(SimpleAggregateTypes.StructureListElement).Dtor_integerValue().UnwrapOr(nil) == nil {
					return nil
				}
				b = val.(SimpleAggregateTypes.StructureListElement).Dtor_integerValue().UnwrapOr(nil).(int32)
				return &b
			}()})
		}
		return fieldValue
	}(), SimpleStringMap: func() map[string]string {
		var m map[string]string = make(map[string]string)
		if dafnyOutput.Dtor_simpleStringMap().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_simpleStringMap().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[func() string {
				var s string
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return s
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = func() string {
				var s string
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1))); ; {
					val, ok := i()
					if !ok {
						return s
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()
		}
		return m
	}(), SimpleIntegerMap: func() map[string]int32 {
		var m map[string]int32 = make(map[string]int32)
		if dafnyOutput.Dtor_simpleIntegerMap().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_simpleIntegerMap().UnwrapOr(nil).(dafny.Map).Items()); ; {
			val, ok := i()
			if !ok {
				break
			}
			m[func() string {
				var s string
				for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
					val, ok := i()
					if !ok {
						return s
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()] = func() int32 {
				var b = (*val.(dafny.Tuple).IndexInt(1)).(int32)
				return b
			}()

		}
		return m
	}(), NestedStructure: &SimpleAggregateTypes.NestedStructure_smithygenerated{StringStructure: &SimpleAggregateTypes.StringStructure_smithygenerated{Value: func() *string {
		var s string
		if dafnyOutput.Dtor_nestedStructure().UnwrapOr(nil).(SimpleAggregateTypes.NestedStructure).Dtor_stringStructure().UnwrapOr(nil).(SimpleAggregateTypes.StringStructure).Dtor_value().UnwrapOr(nil) == nil {
			return nil
		}
		for i := dafny.Iterate(dafnyOutput.Dtor_nestedStructure().UnwrapOr(nil).(SimpleAggregateTypes.NestedStructure).Dtor_stringStructure().UnwrapOr(nil).(SimpleAggregateTypes.StringStructure).Dtor_value().UnwrapOr(nil)); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()}}}

}

func CollectionOfErrors_Output_FromDafny(dafnyOutput SimpleAggregateTypes.Error) SimpleAggregateTypes.CollectionOfErrors {
	listOfErrors := dafnyOutput.Dtor_list()
	message := dafnyOutput.Dtor_message()
	t := SimpleAggregateTypes.CollectionOfErrors{}
	for i := dafny.Iterate(listOfErrors); ; {
		val, ok := i()
		if !ok {
			break
		}
		err := val.(SimpleAggregateTypes.Error)
		t.ListOfErrors = append(t.ListOfErrors, Error_FromDafny(err))

	}
	t.Message = func() string {
		var s string
		for i := dafny.Iterate(message); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
	return t
}
func OpaqueError_Output_FromDafny(dafnyOutput SimpleAggregateTypes.Error) SimpleAggregateTypes.OpaqueError_smithygenerated {
	return SimpleAggregateTypes.OpaqueError_smithygenerated{
		ErrObject: dafnyOutput.Dtor_obj(),
	}
}

func Error_FromDafny(err SimpleAggregateTypes.Error) error {
	// Service Errors

	//DependentErrors

	//Unmodelled Errors
	if err.Is_CollectionOfErrors() {
		return CollectionOfErrors_Output_FromDafny(err)
	}

	return OpaqueError_Output_FromDafny(err)
}

func SimpleAggregateConfig_FromDafny(dafnyOutput SimpleAggregateTypes.SimpleAggregateConfig) SimpleAggregateTypes.SimpleAggregateConfig_smithygenerated {
	return SimpleAggregateTypes.SimpleAggregateConfig_smithygenerated{}

}
