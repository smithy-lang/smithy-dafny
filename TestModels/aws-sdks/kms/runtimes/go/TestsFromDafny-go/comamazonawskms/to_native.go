// Code generated by smithy-go-codegen DO NOT EDIT.

package comamazonawskms

import (
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/aws/aws-sdk-go-v2/service/kms/types"
	"github.com/dafny-lang/DafnyRuntimeGo/dafny"
	"github.com/smithy-lang/smithy-dafny/kms/comamazonawskmsinternaldafnytypes"
)

func CancelKeyDeletionInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.CancelKeyDeletionRequest) kms.CancelKeyDeletionInput {

	return func() kms.CancelKeyDeletionInput {

		return kms.CancelKeyDeletionInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CancelKeyDeletionOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.CancelKeyDeletionResponse) kms.CancelKeyDeletionOutput {

	return func() kms.CancelKeyDeletionOutput {

		return kms.CancelKeyDeletionOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ConnectCustomKeyStoreInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ConnectCustomKeyStoreRequest) kms.ConnectCustomKeyStoreInput {

	return func() kms.ConnectCustomKeyStoreInput {

		return kms.ConnectCustomKeyStoreInput{
			CustomKeyStoreId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ConnectCustomKeyStoreOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ConnectCustomKeyStoreResponse) kms.ConnectCustomKeyStoreOutput {

	return func() kms.ConnectCustomKeyStoreOutput {

		return kms.ConnectCustomKeyStoreOutput{}
	}()

}

func CreateAliasInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.CreateAliasRequest) kms.CreateAliasInput {

	return func() kms.CreateAliasInput {

		return kms.CreateAliasInput{
			AliasName: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_AliasName()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), TargetKeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_TargetKeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CreateCustomKeyStoreInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.CreateCustomKeyStoreRequest) kms.CreateCustomKeyStoreInput {

	return func() kms.CreateCustomKeyStoreInput {

		return kms.CreateCustomKeyStoreInput{
			CustomKeyStoreName: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreName()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), CloudHsmClusterId: func() *string {
				var s string
				if dafnyInput.Dtor_CloudHsmClusterId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_CloudHsmClusterId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), TrustAnchorCertificate: func() *string {
				var s string
				if dafnyInput.Dtor_TrustAnchorCertificate().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_TrustAnchorCertificate().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyStorePassword: func() *string {
				var s string
				if dafnyInput.Dtor_KeyStorePassword().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_KeyStorePassword().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), CustomKeyStoreType: func() types.CustomKeyStoreType {
				var u types.CustomKeyStoreType
				//TODO: What to do if nil
				if dafnyInput.Dtor_CustomKeyStoreType().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_CustomKeyStoreType().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.CustomKeyStoreType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_CustomKeyStoreType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.CustomKeyStoreType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), XksProxyUriEndpoint: func() *string {
				var s string
				if dafnyInput.Dtor_XksProxyUriEndpoint().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_XksProxyUriEndpoint().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), XksProxyUriPath: func() *string {
				var s string
				if dafnyInput.Dtor_XksProxyUriPath().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_XksProxyUriPath().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), XksProxyVpcEndpointServiceName: func() *string {
				var s string
				if dafnyInput.Dtor_XksProxyVpcEndpointServiceName().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_XksProxyVpcEndpointServiceName().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), XksProxyAuthenticationCredential: func() *types.XksProxyAuthenticationCredentialType {
				if dafnyInput.Dtor_XksProxyAuthenticationCredential().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.XksProxyAuthenticationCredentialType{
					AccessKeyId: func() *string {
						var s string

						for i := dafny.Iterate(dafnyInput.Dtor_XksProxyAuthenticationCredential().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyAuthenticationCredentialType).Dtor_AccessKeyId()); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), RawSecretAccessKey: func() *string {
						var s string

						for i := dafny.Iterate(dafnyInput.Dtor_XksProxyAuthenticationCredential().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyAuthenticationCredentialType).Dtor_RawSecretAccessKey()); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()}
			}(), XksProxyConnectivity: func() types.XksProxyConnectivityType {
				var u types.XksProxyConnectivityType
				//TODO: What to do if nil
				if dafnyInput.Dtor_XksProxyConnectivity().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_XksProxyConnectivity().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConnectivityType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_XksProxyConnectivityType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.XksProxyConnectivityType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func CreateCustomKeyStoreOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.CreateCustomKeyStoreResponse) kms.CreateCustomKeyStoreOutput {

	return func() kms.CreateCustomKeyStoreOutput {

		return kms.CreateCustomKeyStoreOutput{
			CustomKeyStoreId: func() *string {
				var s string
				if dafnyOutput.Dtor_CustomKeyStoreId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CustomKeyStoreId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CreateGrantInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.CreateGrantRequest) kms.CreateGrantInput {

	return func() kms.CreateGrantInput {

		return kms.CreateGrantInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), GranteePrincipal: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_GranteePrincipal()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), RetiringPrincipal: func() *string {
				var s string
				if dafnyInput.Dtor_RetiringPrincipal().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_RetiringPrincipal().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Operations: func() []types.GrantOperation {
				var fieldValue []types.GrantOperation

				for i := dafny.Iterate(dafnyInput.Dtor_Operations().(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.GrantOperation {
						var u types.GrantOperation

						inputEnum := val.(comamazonawskmsinternaldafnytypes.GrantOperation)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_GrantOperation_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.GrantOperation).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}())
				}
				return fieldValue
			}(), Constraints: func() *types.GrantConstraints {
				if dafnyInput.Dtor_Constraints().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.GrantConstraints{
					EncryptionContextSubset: func() map[string]string {
						var m map[string]string = make(map[string]string)
						if dafnyInput.Dtor_Constraints().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.GrantConstraints).Dtor_EncryptionContextSubset().UnwrapOr(nil) == nil {
							return nil
						}

						for i := dafny.Iterate(dafnyInput.Dtor_Constraints().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.GrantConstraints).Dtor_EncryptionContextSubset().UnwrapOr(nil).(dafny.Map).Items()); ; {
							val, ok := i()
							if !ok {
								break
							}
							m[func() string {
								var s string
								if (*val.(dafny.Tuple).IndexInt(0)) == nil {
									return s
								}
								for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
									val, ok := i()
									if !ok {
										return []string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()] = func() string {
								var s string

								for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
									val, ok := i()
									if !ok {
										return []string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()
						}
						return m
					}(), EncryptionContextEquals: func() map[string]string {
						var m map[string]string = make(map[string]string)
						if dafnyInput.Dtor_Constraints().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.GrantConstraints).Dtor_EncryptionContextEquals().UnwrapOr(nil) == nil {
							return nil
						}

						for i := dafny.Iterate(dafnyInput.Dtor_Constraints().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.GrantConstraints).Dtor_EncryptionContextEquals().UnwrapOr(nil).(dafny.Map).Items()); ; {
							val, ok := i()
							if !ok {
								break
							}
							m[func() string {
								var s string
								if (*val.(dafny.Tuple).IndexInt(0)) == nil {
									return s
								}
								for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
									val, ok := i()
									if !ok {
										return []string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()] = func() string {
								var s string

								for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
									val, ok := i()
									if !ok {
										return []string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()
						}
						return m
					}()}
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), Name: func() *string {
				var s string
				if dafnyInput.Dtor_Name().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Name().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func CreateGrantOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.CreateGrantResponse) kms.CreateGrantOutput {

	return func() kms.CreateGrantOutput {

		return kms.CreateGrantOutput{
			GrantToken: func() *string {
				var s string
				if dafnyOutput.Dtor_GrantToken().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_GrantToken().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), GrantId: func() *string {
				var s string
				if dafnyOutput.Dtor_GrantId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_GrantId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CreateKeyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.CreateKeyRequest) kms.CreateKeyInput {

	return func() kms.CreateKeyInput {

		return kms.CreateKeyInput{
			Policy: func() *string {
				var s string
				if dafnyInput.Dtor_Policy().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Policy().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Description: func() *string {
				var s string
				if dafnyInput.Dtor_Description().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Description().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyUsage: func() types.KeyUsageType {
				var u types.KeyUsageType
				//TODO: What to do if nil
				if dafnyInput.Dtor_KeyUsage().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_KeyUsage().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyUsageType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyUsageType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.KeyUsageType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), CustomerMasterKeySpec: func() types.CustomerMasterKeySpec {
				var u types.CustomerMasterKeySpec
				//TODO: What to do if nil
				if dafnyInput.Dtor_CustomerMasterKeySpec().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_CustomerMasterKeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_CustomerMasterKeySpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), KeySpec: func() types.KeySpec {
				var u types.KeySpec
				//TODO: What to do if nil
				if dafnyInput.Dtor_KeySpec().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_KeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeySpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeySpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.KeySpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), Origin: func() types.OriginType {
				var u types.OriginType
				//TODO: What to do if nil
				if dafnyInput.Dtor_Origin().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_Origin().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.OriginType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_OriginType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.OriginType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), CustomKeyStoreId: func() *string {
				var s string
				if dafnyInput.Dtor_CustomKeyStoreId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), BypassPolicyLockoutSafetyCheck: func() bool {
				var b bool
				if dafnyInput.Dtor_BypassPolicyLockoutSafetyCheck().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyInput.Dtor_BypassPolicyLockoutSafetyCheck().UnwrapOr(nil).(bool)
				return b
			}(), Tags: func() []types.Tag {
				var fieldValue []types.Tag
				if dafnyInput.Dtor_Tags().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Tags().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.Tag {

						return types.Tag{
							TagKey: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagKey()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), TagValue: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagValue()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}())
				}
				return fieldValue
			}(), MultiRegion: func() *bool {
				var b bool
				if dafnyInput.Dtor_MultiRegion().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_MultiRegion().UnwrapOr(nil).(bool)
				return &b
			}(), XksKeyId: func() *string {
				var s string
				if dafnyInput.Dtor_XksKeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_XksKeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CreateKeyOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.CreateKeyResponse) kms.CreateKeyOutput {

	return func() kms.CreateKeyOutput {

		return kms.CreateKeyOutput{
			KeyMetadata: func() *types.KeyMetadata {
				if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.KeyMetadata{
					AWSAccountId: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_AWSAccountId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_AWSAccountId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), KeyId: func() *string {
						var s string

						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyId()); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), Arn: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Arn().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Arn().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), CreationDate: nil, Enabled: func() bool {
						var b bool
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Enabled().UnwrapOr(nil) == nil {
							return b
						}
						b = dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Enabled().UnwrapOr(nil).(bool)
						return b
					}(), Description: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Description().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Description().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), KeyUsage: func() types.KeyUsageType {
						var u types.KeyUsageType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyUsage().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyUsage().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyUsageType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyUsageType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyUsageType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeyState: func() types.KeyState {
						var u types.KeyState
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyState().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyState().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyState)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyState_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyState).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), DeletionDate: nil, ValidTo: nil, Origin: func() types.OriginType {
						var u types.OriginType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Origin().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Origin().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.OriginType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_OriginType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.OriginType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), CustomKeyStoreId: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomKeyStoreId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomKeyStoreId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), CloudHsmClusterId: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CloudHsmClusterId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CloudHsmClusterId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), ExpirationModel: func() types.ExpirationModelType {
						var u types.ExpirationModelType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_ExpirationModel().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_ExpirationModel().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.ExpirationModelType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_ExpirationModelType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.ExpirationModelType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeyManager: func() types.KeyManagerType {
						var u types.KeyManagerType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyManager().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyManager().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyManagerType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyManagerType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyManagerType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), CustomerMasterKeySpec: func() types.CustomerMasterKeySpec {
						var u types.CustomerMasterKeySpec
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomerMasterKeySpec().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomerMasterKeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_CustomerMasterKeySpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeySpec: func() types.KeySpec {
						var u types.KeySpec
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeySpec().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeySpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeySpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeySpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), EncryptionAlgorithms: func() []types.EncryptionAlgorithmSpec {
						var fieldValue []types.EncryptionAlgorithmSpec
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_EncryptionAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_EncryptionAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.EncryptionAlgorithmSpec {
								var u types.EncryptionAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), SigningAlgorithms: func() []types.SigningAlgorithmSpec {
						var fieldValue []types.SigningAlgorithmSpec
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_SigningAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_SigningAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.SigningAlgorithmSpec {
								var u types.SigningAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_SigningAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), KeyAgreementAlgorithms: func() []types.KeyAgreementAlgorithmSpec {
						var fieldValue []types.KeyAgreementAlgorithmSpec
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyAgreementAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyAgreementAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.KeyAgreementAlgorithmSpec {
								var u types.KeyAgreementAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyAgreementAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), MultiRegion: func() *bool {
						var b bool
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegion().UnwrapOr(nil) == nil {
							return nil
						}
						b = dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegion().UnwrapOr(nil).(bool)
						return &b
					}(), MultiRegionConfiguration: func() *types.MultiRegionConfiguration {
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil) == nil {
							return nil
						}
						return &types.MultiRegionConfiguration{
							MultiRegionKeyType: func() types.MultiRegionKeyType {
								var u types.MultiRegionKeyType
								//TODO: What to do if nil
								if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_MultiRegionKeyType().UnwrapOr(nil) == nil {
									return u
								}
								inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_MultiRegionKeyType().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKeyType)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MultiRegionKeyType_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.MultiRegionKeyType).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}(), PrimaryKey: func() *types.MultiRegionKey {
								if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil) == nil {
									return nil
								}
								return &types.MultiRegionKey{
									Arn: func() *string {
										var s string
										if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}(), Region: func() *string {
										var s string
										if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}()}
							}(), ReplicaKeys: func() []types.MultiRegionKey {
								var fieldValue []types.MultiRegionKey
								if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_ReplicaKeys().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_ReplicaKeys().UnwrapOr(nil).(dafny.Sequence)); ; {
									val, ok := i()
									if !ok {
										break
									}
									fieldValue = append(fieldValue, func() types.MultiRegionKey {

										return types.MultiRegionKey{
											Arn: func() *string {
												var s string
												if val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil) == nil {
													return nil
												}
												for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil)); ; {
													val, ok := i()
													if !ok {
														return &[]string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}(), Region: func() *string {
												var s string
												if val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil) == nil {
													return nil
												}
												for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil)); ; {
													val, ok := i()
													if !ok {
														return &[]string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}()}
									}())
								}
								return fieldValue
							}()}
					}(), PendingDeletionWindowInDays: func() *int32 {
						var i int32
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_PendingDeletionWindowInDays().UnwrapOr(nil) == nil {
							return nil
						}
						i = dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_PendingDeletionWindowInDays().UnwrapOr(nil).(int32)
						return &i
					}(), MacAlgorithms: func() []types.MacAlgorithmSpec {
						var fieldValue []types.MacAlgorithmSpec
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MacAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MacAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.MacAlgorithmSpec {
								var u types.MacAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MacAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), XksKeyConfiguration: func() *types.XksKeyConfigurationType {
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil) == nil {
							return nil
						}
						return &types.XksKeyConfigurationType{
							Id: func() *string {
								var s string
								if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksKeyConfigurationType).Dtor_Id().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksKeyConfigurationType).Dtor_Id().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}()}
			}()}
	}()

}

func DecryptInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DecryptRequest) kms.DecryptInput {

	return func() kms.DecryptInput {

		return kms.DecryptInput{
			CiphertextBlob: func() []byte {
				var b []byte
				if dafnyInput.Dtor_CiphertextBlob() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_CiphertextBlob()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), EncryptionContext: func() map[string]string {
				var m map[string]string = make(map[string]string)
				if dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil) == nil {
					return nil
				}

				for i := dafny.Iterate(dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil).(dafny.Map).Items()); ; {
					val, ok := i()
					if !ok {
						break
					}
					m[func() string {
						var s string
						if (*val.(dafny.Tuple).IndexInt(0)) == nil {
							return s
						}
						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()] = func() string {
						var s string

						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()
				}
				return m
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), KeyId: func() *string {
				var s string
				if dafnyInput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), EncryptionAlgorithm: func() types.EncryptionAlgorithmSpec {
				var u types.EncryptionAlgorithmSpec
				//TODO: What to do if nil
				if dafnyInput.Dtor_EncryptionAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_EncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), Recipient: func() *types.RecipientInfo {
				if dafnyInput.Dtor_Recipient().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.RecipientInfo{
					KeyEncryptionAlgorithm: func() types.KeyEncryptionMechanism {
						var u types.KeyEncryptionMechanism
						//TODO: What to do if nil
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyEncryptionMechanism_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), AttestationDocument: func() []byte {
						var b []byte
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return b
							} else {
								b = append(b, val.(byte))
							}
						}
					}()}
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func DecryptOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.DecryptResponse) kms.DecryptOutput {

	return func() kms.DecryptOutput {

		return kms.DecryptOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Plaintext: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_Plaintext().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Plaintext().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), EncryptionAlgorithm: func() types.EncryptionAlgorithmSpec {
				var u types.EncryptionAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_EncryptionAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_EncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), CiphertextForRecipient: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}()}
	}()

}

func DeleteAliasInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DeleteAliasRequest) kms.DeleteAliasInput {

	return func() kms.DeleteAliasInput {

		return kms.DeleteAliasInput{
			AliasName: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_AliasName()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DeleteCustomKeyStoreInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DeleteCustomKeyStoreRequest) kms.DeleteCustomKeyStoreInput {

	return func() kms.DeleteCustomKeyStoreInput {

		return kms.DeleteCustomKeyStoreInput{
			CustomKeyStoreId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DeleteCustomKeyStoreOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.DeleteCustomKeyStoreResponse) kms.DeleteCustomKeyStoreOutput {

	return func() kms.DeleteCustomKeyStoreOutput {

		return kms.DeleteCustomKeyStoreOutput{}
	}()

}

func DeleteImportedKeyMaterialInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DeleteImportedKeyMaterialRequest) kms.DeleteImportedKeyMaterialInput {

	return func() kms.DeleteImportedKeyMaterialInput {

		return kms.DeleteImportedKeyMaterialInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DeriveSharedSecretInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DeriveSharedSecretRequest) kms.DeriveSharedSecretInput {

	return func() kms.DeriveSharedSecretInput {

		return kms.DeriveSharedSecretInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyAgreementAlgorithm: func() types.KeyAgreementAlgorithmSpec {
				var u types.KeyAgreementAlgorithmSpec

				inputEnum := dafnyInput.Dtor_KeyAgreementAlgorithm()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyAgreementAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), PublicKey: func() []byte {
				var b []byte
				if dafnyInput.Dtor_PublicKey() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_PublicKey()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}(), Recipient: func() *types.RecipientInfo {
				if dafnyInput.Dtor_Recipient().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.RecipientInfo{
					KeyEncryptionAlgorithm: func() types.KeyEncryptionMechanism {
						var u types.KeyEncryptionMechanism
						//TODO: What to do if nil
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyEncryptionMechanism_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), AttestationDocument: func() []byte {
						var b []byte
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return b
							} else {
								b = append(b, val.(byte))
							}
						}
					}()}
			}()}
	}()

}

func DeriveSharedSecretOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.DeriveSharedSecretResponse) kms.DeriveSharedSecretOutput {

	return func() kms.DeriveSharedSecretOutput {

		return kms.DeriveSharedSecretOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), SharedSecret: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_SharedSecret().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_SharedSecret().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), CiphertextForRecipient: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), KeyAgreementAlgorithm: func() types.KeyAgreementAlgorithmSpec {
				var u types.KeyAgreementAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_KeyAgreementAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_KeyAgreementAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyAgreementAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), KeyOrigin: func() types.OriginType {
				var u types.OriginType
				//TODO: What to do if nil
				if dafnyOutput.Dtor_KeyOrigin().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_KeyOrigin().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.OriginType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_OriginType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.OriginType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func DescribeCustomKeyStoresInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DescribeCustomKeyStoresRequest) kms.DescribeCustomKeyStoresInput {

	return func() kms.DescribeCustomKeyStoresInput {

		return kms.DescribeCustomKeyStoresInput{
			CustomKeyStoreId: func() *string {
				var s string
				if dafnyInput.Dtor_CustomKeyStoreId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), CustomKeyStoreName: func() *string {
				var s string
				if dafnyInput.Dtor_CustomKeyStoreName().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreName().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Limit: func() *int32 {
				var i int32
				if dafnyInput.Dtor_Limit().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_Limit().UnwrapOr(nil).(int32)
				return &i
			}(), Marker: func() *string {
				var s string
				if dafnyInput.Dtor_Marker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Marker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DescribeCustomKeyStoresOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.DescribeCustomKeyStoresResponse) kms.DescribeCustomKeyStoresOutput {

	return func() kms.DescribeCustomKeyStoresOutput {

		return kms.DescribeCustomKeyStoresOutput{
			CustomKeyStores: func() []types.CustomKeyStoresListEntry {
				var fieldValue []types.CustomKeyStoresListEntry
				if dafnyOutput.Dtor_CustomKeyStores().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CustomKeyStores().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.CustomKeyStoresListEntry {

						return types.CustomKeyStoresListEntry{
							CustomKeyStoreId: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_CustomKeyStoreId().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_CustomKeyStoreId().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), CustomKeyStoreName: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_CustomKeyStoreName().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_CustomKeyStoreName().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), CloudHsmClusterId: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_CloudHsmClusterId().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_CloudHsmClusterId().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), TrustAnchorCertificate: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_TrustAnchorCertificate().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_TrustAnchorCertificate().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), ConnectionState: func() types.ConnectionStateType {
								var u types.ConnectionStateType
								//TODO: What to do if nil
								if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_ConnectionState().UnwrapOr(nil) == nil {
									return u
								}
								inputEnum := val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_ConnectionState().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.ConnectionStateType)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_ConnectionStateType_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.ConnectionStateType).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}(), ConnectionErrorCode: func() types.ConnectionErrorCodeType {
								var u types.ConnectionErrorCodeType
								//TODO: What to do if nil
								if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_ConnectionErrorCode().UnwrapOr(nil) == nil {
									return u
								}
								inputEnum := val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_ConnectionErrorCode().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.ConnectionErrorCodeType)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_ConnectionErrorCodeType_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.ConnectionErrorCodeType).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}(), CreationDate: nil, CustomKeyStoreType: func() types.CustomKeyStoreType {
								var u types.CustomKeyStoreType
								//TODO: What to do if nil
								if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_CustomKeyStoreType().UnwrapOr(nil) == nil {
									return u
								}
								inputEnum := val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_CustomKeyStoreType().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.CustomKeyStoreType)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_CustomKeyStoreType_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.CustomKeyStoreType).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}(), XksProxyConfiguration: func() *types.XksProxyConfigurationType {
								if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil) == nil {
									return nil
								}
								return &types.XksProxyConfigurationType{
									Connectivity: func() types.XksProxyConnectivityType {
										var u types.XksProxyConnectivityType
										//TODO: What to do if nil
										if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_Connectivity().UnwrapOr(nil) == nil {
											return u
										}
										inputEnum := val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_Connectivity().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConnectivityType)
										index := -1
										for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_XksProxyConnectivityType_{}.AllSingletonConstructors()); ; {
											enum, ok := allEnums()
											if ok {
												index++
												if enum.(comamazonawskmsinternaldafnytypes.XksProxyConnectivityType).Equals(inputEnum) {
													break
												}
											}
										}
										return u.Values()[index]
									}(), AccessKeyId: func() *string {
										var s string
										if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_AccessKeyId().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_AccessKeyId().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}(), UriEndpoint: func() *string {
										var s string
										if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_UriEndpoint().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_UriEndpoint().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}(), UriPath: func() *string {
										var s string
										if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_UriPath().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_UriPath().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}(), VpcEndpointServiceName: func() *string {
										var s string
										if val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_VpcEndpointServiceName().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.CustomKeyStoresListEntry).Dtor_XksProxyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConfigurationType).Dtor_VpcEndpointServiceName().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}()}
							}()}
					}())
				}
				return fieldValue
			}(), NextMarker: func() *string {
				var s string
				if dafnyOutput.Dtor_NextMarker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_NextMarker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Truncated: func() bool {
				var b bool
				if dafnyOutput.Dtor_Truncated().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_Truncated().UnwrapOr(nil).(bool)
				return b
			}()}
	}()

}

func DescribeKeyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DescribeKeyRequest) kms.DescribeKeyInput {

	return func() kms.DescribeKeyInput {

		return kms.DescribeKeyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}()}
	}()

}

func DescribeKeyOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.DescribeKeyResponse) kms.DescribeKeyOutput {

	return func() kms.DescribeKeyOutput {

		return kms.DescribeKeyOutput{
			KeyMetadata: func() *types.KeyMetadata {
				if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.KeyMetadata{
					AWSAccountId: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_AWSAccountId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_AWSAccountId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), KeyId: func() *string {
						var s string

						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyId()); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), Arn: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Arn().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Arn().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), CreationDate: nil, Enabled: func() bool {
						var b bool
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Enabled().UnwrapOr(nil) == nil {
							return b
						}
						b = dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Enabled().UnwrapOr(nil).(bool)
						return b
					}(), Description: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Description().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Description().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), KeyUsage: func() types.KeyUsageType {
						var u types.KeyUsageType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyUsage().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyUsage().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyUsageType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyUsageType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyUsageType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeyState: func() types.KeyState {
						var u types.KeyState
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyState().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyState().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyState)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyState_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyState).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), DeletionDate: nil, ValidTo: nil, Origin: func() types.OriginType {
						var u types.OriginType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Origin().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Origin().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.OriginType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_OriginType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.OriginType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), CustomKeyStoreId: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomKeyStoreId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomKeyStoreId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), CloudHsmClusterId: func() *string {
						var s string
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CloudHsmClusterId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CloudHsmClusterId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), ExpirationModel: func() types.ExpirationModelType {
						var u types.ExpirationModelType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_ExpirationModel().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_ExpirationModel().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.ExpirationModelType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_ExpirationModelType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.ExpirationModelType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeyManager: func() types.KeyManagerType {
						var u types.KeyManagerType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyManager().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyManager().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyManagerType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyManagerType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyManagerType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), CustomerMasterKeySpec: func() types.CustomerMasterKeySpec {
						var u types.CustomerMasterKeySpec
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomerMasterKeySpec().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomerMasterKeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_CustomerMasterKeySpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeySpec: func() types.KeySpec {
						var u types.KeySpec
						//TODO: What to do if nil
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeySpec().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeySpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeySpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeySpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), EncryptionAlgorithms: func() []types.EncryptionAlgorithmSpec {
						var fieldValue []types.EncryptionAlgorithmSpec
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_EncryptionAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_EncryptionAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.EncryptionAlgorithmSpec {
								var u types.EncryptionAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), SigningAlgorithms: func() []types.SigningAlgorithmSpec {
						var fieldValue []types.SigningAlgorithmSpec
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_SigningAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_SigningAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.SigningAlgorithmSpec {
								var u types.SigningAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_SigningAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), KeyAgreementAlgorithms: func() []types.KeyAgreementAlgorithmSpec {
						var fieldValue []types.KeyAgreementAlgorithmSpec
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyAgreementAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyAgreementAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.KeyAgreementAlgorithmSpec {
								var u types.KeyAgreementAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyAgreementAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), MultiRegion: func() *bool {
						var b bool
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegion().UnwrapOr(nil) == nil {
							return nil
						}
						b = dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegion().UnwrapOr(nil).(bool)
						return &b
					}(), MultiRegionConfiguration: func() *types.MultiRegionConfiguration {
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil) == nil {
							return nil
						}
						return &types.MultiRegionConfiguration{
							MultiRegionKeyType: func() types.MultiRegionKeyType {
								var u types.MultiRegionKeyType
								//TODO: What to do if nil
								if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_MultiRegionKeyType().UnwrapOr(nil) == nil {
									return u
								}
								inputEnum := dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_MultiRegionKeyType().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKeyType)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MultiRegionKeyType_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.MultiRegionKeyType).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}(), PrimaryKey: func() *types.MultiRegionKey {
								if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil) == nil {
									return nil
								}
								return &types.MultiRegionKey{
									Arn: func() *string {
										var s string
										if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}(), Region: func() *string {
										var s string
										if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}()}
							}(), ReplicaKeys: func() []types.MultiRegionKey {
								var fieldValue []types.MultiRegionKey
								if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_ReplicaKeys().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_ReplicaKeys().UnwrapOr(nil).(dafny.Sequence)); ; {
									val, ok := i()
									if !ok {
										break
									}
									fieldValue = append(fieldValue, func() types.MultiRegionKey {

										return types.MultiRegionKey{
											Arn: func() *string {
												var s string
												if val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil) == nil {
													return nil
												}
												for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil)); ; {
													val, ok := i()
													if !ok {
														return &[]string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}(), Region: func() *string {
												var s string
												if val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil) == nil {
													return nil
												}
												for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil)); ; {
													val, ok := i()
													if !ok {
														return &[]string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}()}
									}())
								}
								return fieldValue
							}()}
					}(), PendingDeletionWindowInDays: func() *int32 {
						var i int32
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_PendingDeletionWindowInDays().UnwrapOr(nil) == nil {
							return nil
						}
						i = dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_PendingDeletionWindowInDays().UnwrapOr(nil).(int32)
						return &i
					}(), MacAlgorithms: func() []types.MacAlgorithmSpec {
						var fieldValue []types.MacAlgorithmSpec
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MacAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MacAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.MacAlgorithmSpec {
								var u types.MacAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MacAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), XksKeyConfiguration: func() *types.XksKeyConfigurationType {
						if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil) == nil {
							return nil
						}
						return &types.XksKeyConfigurationType{
							Id: func() *string {
								var s string
								if dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksKeyConfigurationType).Dtor_Id().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(dafnyOutput.Dtor_KeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksKeyConfigurationType).Dtor_Id().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}()}
			}()}
	}()

}

func DisableKeyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DisableKeyRequest) kms.DisableKeyInput {

	return func() kms.DisableKeyInput {

		return kms.DisableKeyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DisableKeyRotationInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DisableKeyRotationRequest) kms.DisableKeyRotationInput {

	return func() kms.DisableKeyRotationInput {

		return kms.DisableKeyRotationInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DisconnectCustomKeyStoreInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.DisconnectCustomKeyStoreRequest) kms.DisconnectCustomKeyStoreInput {

	return func() kms.DisconnectCustomKeyStoreInput {

		return kms.DisconnectCustomKeyStoreInput{
			CustomKeyStoreId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DisconnectCustomKeyStoreOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.DisconnectCustomKeyStoreResponse) kms.DisconnectCustomKeyStoreOutput {

	return func() kms.DisconnectCustomKeyStoreOutput {

		return kms.DisconnectCustomKeyStoreOutput{}
	}()

}

func EnableKeyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.EnableKeyRequest) kms.EnableKeyInput {

	return func() kms.EnableKeyInput {

		return kms.EnableKeyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func EnableKeyRotationInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.EnableKeyRotationRequest) kms.EnableKeyRotationInput {

	return func() kms.EnableKeyRotationInput {

		return kms.EnableKeyRotationInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), RotationPeriodInDays: func() *int32 {
				var i int32
				if dafnyInput.Dtor_RotationPeriodInDays().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_RotationPeriodInDays().UnwrapOr(nil).(int32)
				return &i
			}()}
	}()

}

func EncryptInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.EncryptRequest) kms.EncryptInput {

	return func() kms.EncryptInput {

		return kms.EncryptInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Plaintext: func() []byte {
				var b []byte
				if dafnyInput.Dtor_Plaintext() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Plaintext()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), EncryptionContext: func() map[string]string {
				var m map[string]string = make(map[string]string)
				if dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil) == nil {
					return nil
				}

				for i := dafny.Iterate(dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil).(dafny.Map).Items()); ; {
					val, ok := i()
					if !ok {
						break
					}
					m[func() string {
						var s string
						if (*val.(dafny.Tuple).IndexInt(0)) == nil {
							return s
						}
						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()] = func() string {
						var s string

						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()
				}
				return m
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), EncryptionAlgorithm: func() types.EncryptionAlgorithmSpec {
				var u types.EncryptionAlgorithmSpec
				//TODO: What to do if nil
				if dafnyInput.Dtor_EncryptionAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_EncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func EncryptOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.EncryptResponse) kms.EncryptOutput {

	return func() kms.EncryptOutput {

		return kms.EncryptOutput{
			CiphertextBlob: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextBlob().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextBlob().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), EncryptionAlgorithm: func() types.EncryptionAlgorithmSpec {
				var u types.EncryptionAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_EncryptionAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_EncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func GenerateDataKeyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GenerateDataKeyRequest) kms.GenerateDataKeyInput {

	return func() kms.GenerateDataKeyInput {

		return kms.GenerateDataKeyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), EncryptionContext: func() map[string]string {
				var m map[string]string = make(map[string]string)
				if dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil) == nil {
					return nil
				}

				for i := dafny.Iterate(dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil).(dafny.Map).Items()); ; {
					val, ok := i()
					if !ok {
						break
					}
					m[func() string {
						var s string
						if (*val.(dafny.Tuple).IndexInt(0)) == nil {
							return s
						}
						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()] = func() string {
						var s string

						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()
				}
				return m
			}(), NumberOfBytes: func() *int32 {
				var i int32
				if dafnyInput.Dtor_NumberOfBytes().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_NumberOfBytes().UnwrapOr(nil).(int32)
				return &i
			}(), KeySpec: func() types.DataKeySpec {
				var u types.DataKeySpec
				//TODO: What to do if nil
				if dafnyInput.Dtor_KeySpec().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_KeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.DataKeySpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_DataKeySpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.DataKeySpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), Recipient: func() *types.RecipientInfo {
				if dafnyInput.Dtor_Recipient().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.RecipientInfo{
					KeyEncryptionAlgorithm: func() types.KeyEncryptionMechanism {
						var u types.KeyEncryptionMechanism
						//TODO: What to do if nil
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyEncryptionMechanism_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), AttestationDocument: func() []byte {
						var b []byte
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return b
							} else {
								b = append(b, val.(byte))
							}
						}
					}()}
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func GenerateDataKeyOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GenerateDataKeyResponse) kms.GenerateDataKeyOutput {

	return func() kms.GenerateDataKeyOutput {

		return kms.GenerateDataKeyOutput{
			CiphertextBlob: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextBlob().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextBlob().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), Plaintext: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_Plaintext().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Plaintext().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), CiphertextForRecipient: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}()}
	}()

}

func GenerateDataKeyPairInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GenerateDataKeyPairRequest) kms.GenerateDataKeyPairInput {

	return func() kms.GenerateDataKeyPairInput {

		return kms.GenerateDataKeyPairInput{
			EncryptionContext: func() map[string]string {
				var m map[string]string = make(map[string]string)
				if dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil) == nil {
					return nil
				}

				for i := dafny.Iterate(dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil).(dafny.Map).Items()); ; {
					val, ok := i()
					if !ok {
						break
					}
					m[func() string {
						var s string
						if (*val.(dafny.Tuple).IndexInt(0)) == nil {
							return s
						}
						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()] = func() string {
						var s string

						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()
				}
				return m
			}(), KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyPairSpec: func() types.DataKeyPairSpec {
				var u types.DataKeyPairSpec

				inputEnum := dafnyInput.Dtor_KeyPairSpec()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_DataKeyPairSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.DataKeyPairSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), Recipient: func() *types.RecipientInfo {
				if dafnyInput.Dtor_Recipient().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.RecipientInfo{
					KeyEncryptionAlgorithm: func() types.KeyEncryptionMechanism {
						var u types.KeyEncryptionMechanism
						//TODO: What to do if nil
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyEncryptionMechanism_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), AttestationDocument: func() []byte {
						var b []byte
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return b
							} else {
								b = append(b, val.(byte))
							}
						}
					}()}
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func GenerateDataKeyPairOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GenerateDataKeyPairResponse) kms.GenerateDataKeyPairOutput {

	return func() kms.GenerateDataKeyPairOutput {

		return kms.GenerateDataKeyPairOutput{
			PrivateKeyCiphertextBlob: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_PrivateKeyCiphertextBlob().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PrivateKeyCiphertextBlob().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), PrivateKeyPlaintext: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_PrivateKeyPlaintext().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PrivateKeyPlaintext().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), PublicKey: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_PublicKey().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PublicKey().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyPairSpec: func() types.DataKeyPairSpec {
				var u types.DataKeyPairSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_KeyPairSpec().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_KeyPairSpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.DataKeyPairSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_DataKeyPairSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.DataKeyPairSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), CiphertextForRecipient: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}()}
	}()

}

func GenerateDataKeyPairWithoutPlaintextInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GenerateDataKeyPairWithoutPlaintextRequest) kms.GenerateDataKeyPairWithoutPlaintextInput {

	return func() kms.GenerateDataKeyPairWithoutPlaintextInput {

		return kms.GenerateDataKeyPairWithoutPlaintextInput{
			EncryptionContext: func() map[string]string {
				var m map[string]string = make(map[string]string)
				if dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil) == nil {
					return nil
				}

				for i := dafny.Iterate(dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil).(dafny.Map).Items()); ; {
					val, ok := i()
					if !ok {
						break
					}
					m[func() string {
						var s string
						if (*val.(dafny.Tuple).IndexInt(0)) == nil {
							return s
						}
						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()] = func() string {
						var s string

						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()
				}
				return m
			}(), KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyPairSpec: func() types.DataKeyPairSpec {
				var u types.DataKeyPairSpec

				inputEnum := dafnyInput.Dtor_KeyPairSpec()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_DataKeyPairSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.DataKeyPairSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func GenerateDataKeyPairWithoutPlaintextOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GenerateDataKeyPairWithoutPlaintextResponse) kms.GenerateDataKeyPairWithoutPlaintextOutput {

	return func() kms.GenerateDataKeyPairWithoutPlaintextOutput {

		return kms.GenerateDataKeyPairWithoutPlaintextOutput{
			PrivateKeyCiphertextBlob: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_PrivateKeyCiphertextBlob().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PrivateKeyCiphertextBlob().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), PublicKey: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_PublicKey().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PublicKey().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyPairSpec: func() types.DataKeyPairSpec {
				var u types.DataKeyPairSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_KeyPairSpec().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_KeyPairSpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.DataKeyPairSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_DataKeyPairSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.DataKeyPairSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func GenerateDataKeyWithoutPlaintextInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GenerateDataKeyWithoutPlaintextRequest) kms.GenerateDataKeyWithoutPlaintextInput {

	return func() kms.GenerateDataKeyWithoutPlaintextInput {

		return kms.GenerateDataKeyWithoutPlaintextInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), EncryptionContext: func() map[string]string {
				var m map[string]string = make(map[string]string)
				if dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil) == nil {
					return nil
				}

				for i := dafny.Iterate(dafnyInput.Dtor_EncryptionContext().UnwrapOr(nil).(dafny.Map).Items()); ; {
					val, ok := i()
					if !ok {
						break
					}
					m[func() string {
						var s string
						if (*val.(dafny.Tuple).IndexInt(0)) == nil {
							return s
						}
						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()] = func() string {
						var s string

						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()
				}
				return m
			}(), KeySpec: func() types.DataKeySpec {
				var u types.DataKeySpec
				//TODO: What to do if nil
				if dafnyInput.Dtor_KeySpec().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_KeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.DataKeySpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_DataKeySpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.DataKeySpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), NumberOfBytes: func() *int32 {
				var i int32
				if dafnyInput.Dtor_NumberOfBytes().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_NumberOfBytes().UnwrapOr(nil).(int32)
				return &i
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func GenerateDataKeyWithoutPlaintextOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GenerateDataKeyWithoutPlaintextResponse) kms.GenerateDataKeyWithoutPlaintextOutput {

	return func() kms.GenerateDataKeyWithoutPlaintextOutput {

		return kms.GenerateDataKeyWithoutPlaintextOutput{
			CiphertextBlob: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextBlob().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextBlob().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func GenerateMacInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GenerateMacRequest) kms.GenerateMacInput {

	return func() kms.GenerateMacInput {

		return kms.GenerateMacInput{
			Message: func() []byte {
				var b []byte
				if dafnyInput.Dtor_Message() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Message()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), MacAlgorithm: func() types.MacAlgorithmSpec {
				var u types.MacAlgorithmSpec

				inputEnum := dafnyInput.Dtor_MacAlgorithm()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MacAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func GenerateMacOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GenerateMacResponse) kms.GenerateMacOutput {

	return func() kms.GenerateMacOutput {

		return kms.GenerateMacOutput{
			Mac: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_Mac().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Mac().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), MacAlgorithm: func() types.MacAlgorithmSpec {
				var u types.MacAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_MacAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_MacAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MacAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func GenerateRandomInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GenerateRandomRequest) kms.GenerateRandomInput {

	return func() kms.GenerateRandomInput {

		return kms.GenerateRandomInput{
			NumberOfBytes: func() *int32 {
				var i int32
				if dafnyInput.Dtor_NumberOfBytes().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_NumberOfBytes().UnwrapOr(nil).(int32)
				return &i
			}(), CustomKeyStoreId: func() *string {
				var s string
				if dafnyInput.Dtor_CustomKeyStoreId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Recipient: func() *types.RecipientInfo {
				if dafnyInput.Dtor_Recipient().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.RecipientInfo{
					KeyEncryptionAlgorithm: func() types.KeyEncryptionMechanism {
						var u types.KeyEncryptionMechanism
						//TODO: What to do if nil
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_KeyEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyEncryptionMechanism_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyEncryptionMechanism).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), AttestationDocument: func() []byte {
						var b []byte
						if dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyInput.Dtor_Recipient().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RecipientInfo).Dtor_AttestationDocument().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return b
							} else {
								b = append(b, val.(byte))
							}
						}
					}()}
			}()}
	}()

}

func GenerateRandomOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GenerateRandomResponse) kms.GenerateRandomOutput {

	return func() kms.GenerateRandomOutput {

		return kms.GenerateRandomOutput{
			Plaintext: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_Plaintext().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Plaintext().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), CiphertextForRecipient: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextForRecipient().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}()}
	}()

}

func GetKeyPolicyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GetKeyPolicyRequest) kms.GetKeyPolicyInput {

	return func() kms.GetKeyPolicyInput {

		return kms.GetKeyPolicyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), PolicyName: func() *string {
				var s string
				if dafnyInput.Dtor_PolicyName().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_PolicyName().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func GetKeyPolicyOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GetKeyPolicyResponse) kms.GetKeyPolicyOutput {

	return func() kms.GetKeyPolicyOutput {

		return kms.GetKeyPolicyOutput{
			Policy: func() *string {
				var s string
				if dafnyOutput.Dtor_Policy().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Policy().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), PolicyName: func() *string {
				var s string
				if dafnyOutput.Dtor_PolicyName().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PolicyName().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func GetKeyRotationStatusInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GetKeyRotationStatusRequest) kms.GetKeyRotationStatusInput {

	return func() kms.GetKeyRotationStatusInput {

		return kms.GetKeyRotationStatusInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func GetKeyRotationStatusOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GetKeyRotationStatusResponse) kms.GetKeyRotationStatusOutput {

	return func() kms.GetKeyRotationStatusOutput {

		return kms.GetKeyRotationStatusOutput{
			KeyRotationEnabled: func() bool {
				var b bool
				if dafnyOutput.Dtor_KeyRotationEnabled().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_KeyRotationEnabled().UnwrapOr(nil).(bool)
				return b
			}(), KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), RotationPeriodInDays: func() *int32 {
				var i int32
				if dafnyOutput.Dtor_RotationPeriodInDays().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyOutput.Dtor_RotationPeriodInDays().UnwrapOr(nil).(int32)
				return &i
			}(), NextRotationDate: nil, OnDemandRotationStartDate: nil}
	}()

}

func GetParametersForImportInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GetParametersForImportRequest) kms.GetParametersForImportInput {

	return func() kms.GetParametersForImportInput {

		return kms.GetParametersForImportInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), WrappingAlgorithm: func() types.AlgorithmSpec {
				var u types.AlgorithmSpec

				inputEnum := dafnyInput.Dtor_WrappingAlgorithm()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_AlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.AlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), WrappingKeySpec: func() types.WrappingKeySpec {
				var u types.WrappingKeySpec

				inputEnum := dafnyInput.Dtor_WrappingKeySpec()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_WrappingKeySpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.WrappingKeySpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func GetParametersForImportOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GetParametersForImportResponse) kms.GetParametersForImportOutput {

	return func() kms.GetParametersForImportOutput {

		return kms.GetParametersForImportOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), ImportToken: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_ImportToken().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_ImportToken().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), PublicKey: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_PublicKey().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PublicKey().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), ParametersValidTo: nil}
	}()

}

func GetPublicKeyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.GetPublicKeyRequest) kms.GetPublicKeyInput {

	return func() kms.GetPublicKeyInput {

		return kms.GetPublicKeyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}()}
	}()

}

func GetPublicKeyOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.GetPublicKeyResponse) kms.GetPublicKeyOutput {

	return func() kms.GetPublicKeyOutput {

		return kms.GetPublicKeyOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), PublicKey: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_PublicKey().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PublicKey().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), CustomerMasterKeySpec: func() types.CustomerMasterKeySpec {
				var u types.CustomerMasterKeySpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_CustomerMasterKeySpec().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_CustomerMasterKeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_CustomerMasterKeySpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), KeySpec: func() types.KeySpec {
				var u types.KeySpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_KeySpec().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_KeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeySpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeySpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.KeySpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), KeyUsage: func() types.KeyUsageType {
				var u types.KeyUsageType
				//TODO: What to do if nil
				if dafnyOutput.Dtor_KeyUsage().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_KeyUsage().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyUsageType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyUsageType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.KeyUsageType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), EncryptionAlgorithms: func() []types.EncryptionAlgorithmSpec {
				var fieldValue []types.EncryptionAlgorithmSpec
				if dafnyOutput.Dtor_EncryptionAlgorithms().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_EncryptionAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.EncryptionAlgorithmSpec {
						var u types.EncryptionAlgorithmSpec

						inputEnum := val.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}())
				}
				return fieldValue
			}(), SigningAlgorithms: func() []types.SigningAlgorithmSpec {
				var fieldValue []types.SigningAlgorithmSpec
				if dafnyOutput.Dtor_SigningAlgorithms().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_SigningAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.SigningAlgorithmSpec {
						var u types.SigningAlgorithmSpec

						inputEnum := val.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_SigningAlgorithmSpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}())
				}
				return fieldValue
			}(), KeyAgreementAlgorithms: func() []types.KeyAgreementAlgorithmSpec {
				var fieldValue []types.KeyAgreementAlgorithmSpec
				if dafnyOutput.Dtor_KeyAgreementAlgorithms().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyAgreementAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.KeyAgreementAlgorithmSpec {
						var u types.KeyAgreementAlgorithmSpec

						inputEnum := val.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyAgreementAlgorithmSpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}())
				}
				return fieldValue
			}()}
	}()

}

func ImportKeyMaterialInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ImportKeyMaterialRequest) kms.ImportKeyMaterialInput {

	return func() kms.ImportKeyMaterialInput {

		return kms.ImportKeyMaterialInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), ImportToken: func() []byte {
				var b []byte
				if dafnyInput.Dtor_ImportToken() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_ImportToken()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), EncryptedKeyMaterial: func() []byte {
				var b []byte
				if dafnyInput.Dtor_EncryptedKeyMaterial() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_EncryptedKeyMaterial()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), ValidTo: nil, ExpirationModel: func() types.ExpirationModelType {
				var u types.ExpirationModelType
				//TODO: What to do if nil
				if dafnyInput.Dtor_ExpirationModel().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_ExpirationModel().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.ExpirationModelType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_ExpirationModelType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.ExpirationModelType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func ImportKeyMaterialOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ImportKeyMaterialResponse) kms.ImportKeyMaterialOutput {

	return func() kms.ImportKeyMaterialOutput {

		return kms.ImportKeyMaterialOutput{}
	}()

}

func ListAliasesInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ListAliasesRequest) kms.ListAliasesInput {

	return func() kms.ListAliasesInput {

		return kms.ListAliasesInput{
			KeyId: func() *string {
				var s string
				if dafnyInput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Limit: func() *int32 {
				var i int32
				if dafnyInput.Dtor_Limit().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_Limit().UnwrapOr(nil).(int32)
				return &i
			}(), Marker: func() *string {
				var s string
				if dafnyInput.Dtor_Marker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Marker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ListAliasesOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ListAliasesResponse) kms.ListAliasesOutput {

	return func() kms.ListAliasesOutput {

		return kms.ListAliasesOutput{
			Aliases: func() []types.AliasListEntry {
				var fieldValue []types.AliasListEntry
				if dafnyOutput.Dtor_Aliases().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Aliases().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.AliasListEntry {

						return types.AliasListEntry{
							AliasName: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.AliasListEntry).Dtor_AliasName().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.AliasListEntry).Dtor_AliasName().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), AliasArn: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.AliasListEntry).Dtor_AliasArn().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.AliasListEntry).Dtor_AliasArn().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), TargetKeyId: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.AliasListEntry).Dtor_TargetKeyId().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.AliasListEntry).Dtor_TargetKeyId().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), CreationDate: nil, LastUpdatedDate: nil}
					}())
				}
				return fieldValue
			}(), NextMarker: func() *string {
				var s string
				if dafnyOutput.Dtor_NextMarker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_NextMarker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Truncated: func() bool {
				var b bool
				if dafnyOutput.Dtor_Truncated().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_Truncated().UnwrapOr(nil).(bool)
				return b
			}()}
	}()

}

func ListGrantsInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ListGrantsRequest) kms.ListGrantsInput {

	return func() kms.ListGrantsInput {

		return kms.ListGrantsInput{
			Limit: func() *int32 {
				var i int32
				if dafnyInput.Dtor_Limit().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_Limit().UnwrapOr(nil).(int32)
				return &i
			}(), Marker: func() *string {
				var s string
				if dafnyInput.Dtor_Marker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Marker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), GrantId: func() *string {
				var s string
				if dafnyInput.Dtor_GrantId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), GranteePrincipal: func() *string {
				var s string
				if dafnyInput.Dtor_GranteePrincipal().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GranteePrincipal().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ListGrantsOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ListGrantsResponse) kms.ListGrantsOutput {

	return func() kms.ListGrantsOutput {

		return kms.ListGrantsOutput{
			Grants: func() []types.GrantListEntry {
				var fieldValue []types.GrantListEntry
				if dafnyOutput.Dtor_Grants().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Grants().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.GrantListEntry {

						return types.GrantListEntry{
							KeyId: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_KeyId().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_KeyId().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), GrantId: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_GrantId().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_GrantId().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), Name: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Name().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Name().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), CreationDate: nil, GranteePrincipal: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_GranteePrincipal().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_GranteePrincipal().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), RetiringPrincipal: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_RetiringPrincipal().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_RetiringPrincipal().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), IssuingAccount: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_IssuingAccount().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_IssuingAccount().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), Operations: func() []types.GrantOperation {
								var fieldValue []types.GrantOperation
								if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Operations().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Operations().UnwrapOr(nil).(dafny.Sequence)); ; {
									val, ok := i()
									if !ok {
										break
									}
									fieldValue = append(fieldValue, func() types.GrantOperation {
										var u types.GrantOperation

										inputEnum := val.(comamazonawskmsinternaldafnytypes.GrantOperation)
										index := -1
										for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_GrantOperation_{}.AllSingletonConstructors()); ; {
											enum, ok := allEnums()
											if ok {
												index++
												if enum.(comamazonawskmsinternaldafnytypes.GrantOperation).Equals(inputEnum) {
													break
												}
											}
										}
										return u.Values()[index]
									}())
								}
								return fieldValue
							}(), Constraints: func() *types.GrantConstraints {
								if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Constraints().UnwrapOr(nil) == nil {
									return nil
								}
								return &types.GrantConstraints{
									EncryptionContextSubset: func() map[string]string {
										var m map[string]string = make(map[string]string)
										if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Constraints().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.GrantConstraints).Dtor_EncryptionContextSubset().UnwrapOr(nil) == nil {
											return nil
										}

										for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Constraints().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.GrantConstraints).Dtor_EncryptionContextSubset().UnwrapOr(nil).(dafny.Map).Items()); ; {
											val, ok := i()
											if !ok {
												break
											}
											m[func() string {
												var s string
												if (*val.(dafny.Tuple).IndexInt(0)) == nil {
													return s
												}
												for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
													val, ok := i()
													if !ok {
														return []string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}()] = func() string {
												var s string

												for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
													val, ok := i()
													if !ok {
														return []string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}()
										}
										return m
									}(), EncryptionContextEquals: func() map[string]string {
										var m map[string]string = make(map[string]string)
										if val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Constraints().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.GrantConstraints).Dtor_EncryptionContextEquals().UnwrapOr(nil) == nil {
											return nil
										}

										for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.GrantListEntry).Dtor_Constraints().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.GrantConstraints).Dtor_EncryptionContextEquals().UnwrapOr(nil).(dafny.Map).Items()); ; {
											val, ok := i()
											if !ok {
												break
											}
											m[func() string {
												var s string
												if (*val.(dafny.Tuple).IndexInt(0)) == nil {
													return s
												}
												for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
													val, ok := i()
													if !ok {
														return []string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}()] = func() string {
												var s string

												for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
													val, ok := i()
													if !ok {
														return []string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}()
										}
										return m
									}()}
							}()}
					}())
				}
				return fieldValue
			}(), NextMarker: func() *string {
				var s string
				if dafnyOutput.Dtor_NextMarker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_NextMarker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Truncated: func() bool {
				var b bool
				if dafnyOutput.Dtor_Truncated().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_Truncated().UnwrapOr(nil).(bool)
				return b
			}()}
	}()

}

func ListKeyPoliciesInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ListKeyPoliciesRequest) kms.ListKeyPoliciesInput {

	return func() kms.ListKeyPoliciesInput {

		return kms.ListKeyPoliciesInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Limit: func() *int32 {
				var i int32
				if dafnyInput.Dtor_Limit().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_Limit().UnwrapOr(nil).(int32)
				return &i
			}(), Marker: func() *string {
				var s string
				if dafnyInput.Dtor_Marker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Marker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ListKeyPoliciesOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ListKeyPoliciesResponse) kms.ListKeyPoliciesOutput {

	return func() kms.ListKeyPoliciesOutput {

		return kms.ListKeyPoliciesOutput{
			PolicyNames: func() []string {
				var fieldValue []string
				if dafnyOutput.Dtor_PolicyNames().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_PolicyNames().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), NextMarker: func() *string {
				var s string
				if dafnyOutput.Dtor_NextMarker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_NextMarker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Truncated: func() bool {
				var b bool
				if dafnyOutput.Dtor_Truncated().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_Truncated().UnwrapOr(nil).(bool)
				return b
			}()}
	}()

}

func ListKeyRotationsInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ListKeyRotationsRequest) kms.ListKeyRotationsInput {

	return func() kms.ListKeyRotationsInput {

		return kms.ListKeyRotationsInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Limit: func() *int32 {
				var i int32
				if dafnyInput.Dtor_Limit().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_Limit().UnwrapOr(nil).(int32)
				return &i
			}(), Marker: func() *string {
				var s string
				if dafnyInput.Dtor_Marker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Marker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ListKeyRotationsOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ListKeyRotationsResponse) kms.ListKeyRotationsOutput {

	return func() kms.ListKeyRotationsOutput {

		return kms.ListKeyRotationsOutput{
			Rotations: func() []types.RotationsListEntry {
				var fieldValue []types.RotationsListEntry
				if dafnyOutput.Dtor_Rotations().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Rotations().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.RotationsListEntry {

						return types.RotationsListEntry{
							KeyId: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.RotationsListEntry).Dtor_KeyId().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.RotationsListEntry).Dtor_KeyId().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), RotationDate: nil, RotationType: func() types.RotationType {
								var u types.RotationType
								//TODO: What to do if nil
								if val.(comamazonawskmsinternaldafnytypes.RotationsListEntry).Dtor_RotationType().UnwrapOr(nil) == nil {
									return u
								}
								inputEnum := val.(comamazonawskmsinternaldafnytypes.RotationsListEntry).Dtor_RotationType().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.RotationType)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_RotationType_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.RotationType).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}()}
					}())
				}
				return fieldValue
			}(), NextMarker: func() *string {
				var s string
				if dafnyOutput.Dtor_NextMarker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_NextMarker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Truncated: func() bool {
				var b bool
				if dafnyOutput.Dtor_Truncated().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_Truncated().UnwrapOr(nil).(bool)
				return b
			}()}
	}()

}

func ListKeysInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ListKeysRequest) kms.ListKeysInput {

	return func() kms.ListKeysInput {

		return kms.ListKeysInput{
			Limit: func() *int32 {
				var i int32
				if dafnyInput.Dtor_Limit().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_Limit().UnwrapOr(nil).(int32)
				return &i
			}(), Marker: func() *string {
				var s string
				if dafnyInput.Dtor_Marker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Marker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ListKeysOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ListKeysResponse) kms.ListKeysOutput {

	return func() kms.ListKeysOutput {

		return kms.ListKeysOutput{
			Keys: func() []types.KeyListEntry {
				var fieldValue []types.KeyListEntry
				if dafnyOutput.Dtor_Keys().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Keys().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.KeyListEntry {

						return types.KeyListEntry{
							KeyId: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.KeyListEntry).Dtor_KeyId().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.KeyListEntry).Dtor_KeyId().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), KeyArn: func() *string {
								var s string
								if val.(comamazonawskmsinternaldafnytypes.KeyListEntry).Dtor_KeyArn().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.KeyListEntry).Dtor_KeyArn().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}())
				}
				return fieldValue
			}(), NextMarker: func() *string {
				var s string
				if dafnyOutput.Dtor_NextMarker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_NextMarker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Truncated: func() bool {
				var b bool
				if dafnyOutput.Dtor_Truncated().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_Truncated().UnwrapOr(nil).(bool)
				return b
			}()}
	}()

}

func ListResourceTagsInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ListResourceTagsRequest) kms.ListResourceTagsInput {

	return func() kms.ListResourceTagsInput {

		return kms.ListResourceTagsInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Limit: func() *int32 {
				var i int32
				if dafnyInput.Dtor_Limit().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_Limit().UnwrapOr(nil).(int32)
				return &i
			}(), Marker: func() *string {
				var s string
				if dafnyInput.Dtor_Marker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Marker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ListResourceTagsOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ListResourceTagsResponse) kms.ListResourceTagsOutput {

	return func() kms.ListResourceTagsOutput {

		return kms.ListResourceTagsOutput{
			Tags: func() []types.Tag {
				var fieldValue []types.Tag
				if dafnyOutput.Dtor_Tags().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Tags().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.Tag {

						return types.Tag{
							TagKey: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagKey()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), TagValue: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagValue()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}())
				}
				return fieldValue
			}(), NextMarker: func() *string {
				var s string
				if dafnyOutput.Dtor_NextMarker().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_NextMarker().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Truncated: func() bool {
				var b bool
				if dafnyOutput.Dtor_Truncated().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_Truncated().UnwrapOr(nil).(bool)
				return b
			}()}
	}()

}

func PutKeyPolicyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.PutKeyPolicyRequest) kms.PutKeyPolicyInput {

	return func() kms.PutKeyPolicyInput {

		return kms.PutKeyPolicyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), PolicyName: func() *string {
				var s string
				if dafnyInput.Dtor_PolicyName().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_PolicyName().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Policy: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_Policy()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), BypassPolicyLockoutSafetyCheck: func() bool {
				var b bool
				if dafnyInput.Dtor_BypassPolicyLockoutSafetyCheck().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyInput.Dtor_BypassPolicyLockoutSafetyCheck().UnwrapOr(nil).(bool)
				return b
			}()}
	}()

}

func ReEncryptInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ReEncryptRequest) kms.ReEncryptInput {

	return func() kms.ReEncryptInput {

		return kms.ReEncryptInput{
			CiphertextBlob: func() []byte {
				var b []byte
				if dafnyInput.Dtor_CiphertextBlob() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_CiphertextBlob()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), SourceEncryptionContext: func() map[string]string {
				var m map[string]string = make(map[string]string)
				if dafnyInput.Dtor_SourceEncryptionContext().UnwrapOr(nil) == nil {
					return nil
				}

				for i := dafny.Iterate(dafnyInput.Dtor_SourceEncryptionContext().UnwrapOr(nil).(dafny.Map).Items()); ; {
					val, ok := i()
					if !ok {
						break
					}
					m[func() string {
						var s string
						if (*val.(dafny.Tuple).IndexInt(0)) == nil {
							return s
						}
						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()] = func() string {
						var s string

						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()
				}
				return m
			}(), SourceKeyId: func() *string {
				var s string
				if dafnyInput.Dtor_SourceKeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_SourceKeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), DestinationKeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_DestinationKeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), DestinationEncryptionContext: func() map[string]string {
				var m map[string]string = make(map[string]string)
				if dafnyInput.Dtor_DestinationEncryptionContext().UnwrapOr(nil) == nil {
					return nil
				}

				for i := dafny.Iterate(dafnyInput.Dtor_DestinationEncryptionContext().UnwrapOr(nil).(dafny.Map).Items()); ; {
					val, ok := i()
					if !ok {
						break
					}
					m[func() string {
						var s string
						if (*val.(dafny.Tuple).IndexInt(0)) == nil {
							return s
						}
						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()] = func() string {
						var s string

						for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()
				}
				return m
			}(), SourceEncryptionAlgorithm: func() types.EncryptionAlgorithmSpec {
				var u types.EncryptionAlgorithmSpec
				//TODO: What to do if nil
				if dafnyInput.Dtor_SourceEncryptionAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_SourceEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), DestinationEncryptionAlgorithm: func() types.EncryptionAlgorithmSpec {
				var u types.EncryptionAlgorithmSpec
				//TODO: What to do if nil
				if dafnyInput.Dtor_DestinationEncryptionAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_DestinationEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func ReEncryptOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ReEncryptResponse) kms.ReEncryptOutput {

	return func() kms.ReEncryptOutput {

		return kms.ReEncryptOutput{
			CiphertextBlob: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_CiphertextBlob().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_CiphertextBlob().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), SourceKeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_SourceKeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_SourceKeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), SourceEncryptionAlgorithm: func() types.EncryptionAlgorithmSpec {
				var u types.EncryptionAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_SourceEncryptionAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_SourceEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), DestinationEncryptionAlgorithm: func() types.EncryptionAlgorithmSpec {
				var u types.EncryptionAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_DestinationEncryptionAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_DestinationEncryptionAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func ReplicateKeyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ReplicateKeyRequest) kms.ReplicateKeyInput {

	return func() kms.ReplicateKeyInput {

		return kms.ReplicateKeyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), ReplicaRegion: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_ReplicaRegion()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Policy: func() *string {
				var s string
				if dafnyInput.Dtor_Policy().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Policy().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), BypassPolicyLockoutSafetyCheck: func() bool {
				var b bool
				if dafnyInput.Dtor_BypassPolicyLockoutSafetyCheck().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyInput.Dtor_BypassPolicyLockoutSafetyCheck().UnwrapOr(nil).(bool)
				return b
			}(), Description: func() *string {
				var s string
				if dafnyInput.Dtor_Description().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Description().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Tags: func() []types.Tag {
				var fieldValue []types.Tag
				if dafnyInput.Dtor_Tags().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Tags().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.Tag {

						return types.Tag{
							TagKey: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagKey()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), TagValue: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagValue()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}())
				}
				return fieldValue
			}()}
	}()

}

func ReplicateKeyOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ReplicateKeyResponse) kms.ReplicateKeyOutput {

	return func() kms.ReplicateKeyOutput {

		return kms.ReplicateKeyOutput{
			ReplicaKeyMetadata: func() *types.KeyMetadata {
				if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.KeyMetadata{
					AWSAccountId: func() *string {
						var s string
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_AWSAccountId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_AWSAccountId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), KeyId: func() *string {
						var s string

						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyId()); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), Arn: func() *string {
						var s string
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Arn().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Arn().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), CreationDate: nil, Enabled: func() bool {
						var b bool
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Enabled().UnwrapOr(nil) == nil {
							return b
						}
						b = dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Enabled().UnwrapOr(nil).(bool)
						return b
					}(), Description: func() *string {
						var s string
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Description().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Description().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), KeyUsage: func() types.KeyUsageType {
						var u types.KeyUsageType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyUsage().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyUsage().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyUsageType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyUsageType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyUsageType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeyState: func() types.KeyState {
						var u types.KeyState
						//TODO: What to do if nil
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyState().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyState().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyState)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyState_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyState).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), DeletionDate: nil, ValidTo: nil, Origin: func() types.OriginType {
						var u types.OriginType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Origin().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_Origin().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.OriginType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_OriginType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.OriginType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), CustomKeyStoreId: func() *string {
						var s string
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomKeyStoreId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomKeyStoreId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), CloudHsmClusterId: func() *string {
						var s string
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CloudHsmClusterId().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CloudHsmClusterId().UnwrapOr(nil)); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), ExpirationModel: func() types.ExpirationModelType {
						var u types.ExpirationModelType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_ExpirationModel().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_ExpirationModel().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.ExpirationModelType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_ExpirationModelType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.ExpirationModelType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeyManager: func() types.KeyManagerType {
						var u types.KeyManagerType
						//TODO: What to do if nil
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyManager().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyManager().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyManagerType)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyManagerType_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeyManagerType).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), CustomerMasterKeySpec: func() types.CustomerMasterKeySpec {
						var u types.CustomerMasterKeySpec
						//TODO: What to do if nil
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomerMasterKeySpec().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_CustomerMasterKeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_CustomerMasterKeySpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.CustomerMasterKeySpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), KeySpec: func() types.KeySpec {
						var u types.KeySpec
						//TODO: What to do if nil
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeySpec().UnwrapOr(nil) == nil {
							return u
						}
						inputEnum := dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeySpec().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeySpec)
						index := -1
						for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeySpec_{}.AllSingletonConstructors()); ; {
							enum, ok := allEnums()
							if ok {
								index++
								if enum.(comamazonawskmsinternaldafnytypes.KeySpec).Equals(inputEnum) {
									break
								}
							}
						}
						return u.Values()[index]
					}(), EncryptionAlgorithms: func() []types.EncryptionAlgorithmSpec {
						var fieldValue []types.EncryptionAlgorithmSpec
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_EncryptionAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_EncryptionAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.EncryptionAlgorithmSpec {
								var u types.EncryptionAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_EncryptionAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.EncryptionAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), SigningAlgorithms: func() []types.SigningAlgorithmSpec {
						var fieldValue []types.SigningAlgorithmSpec
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_SigningAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_SigningAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.SigningAlgorithmSpec {
								var u types.SigningAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_SigningAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), KeyAgreementAlgorithms: func() []types.KeyAgreementAlgorithmSpec {
						var fieldValue []types.KeyAgreementAlgorithmSpec
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyAgreementAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_KeyAgreementAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.KeyAgreementAlgorithmSpec {
								var u types.KeyAgreementAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyAgreementAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.KeyAgreementAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), MultiRegion: func() *bool {
						var b bool
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegion().UnwrapOr(nil) == nil {
							return nil
						}
						b = dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegion().UnwrapOr(nil).(bool)
						return &b
					}(), MultiRegionConfiguration: func() *types.MultiRegionConfiguration {
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil) == nil {
							return nil
						}
						return &types.MultiRegionConfiguration{
							MultiRegionKeyType: func() types.MultiRegionKeyType {
								var u types.MultiRegionKeyType
								//TODO: What to do if nil
								if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_MultiRegionKeyType().UnwrapOr(nil) == nil {
									return u
								}
								inputEnum := dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_MultiRegionKeyType().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKeyType)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MultiRegionKeyType_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.MultiRegionKeyType).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}(), PrimaryKey: func() *types.MultiRegionKey {
								if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil) == nil {
									return nil
								}
								return &types.MultiRegionKey{
									Arn: func() *string {
										var s string
										if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}(), Region: func() *string {
										var s string
										if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil) == nil {
											return nil
										}
										for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_PrimaryKey().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil)); ; {
											val, ok := i()
											if !ok {
												return &[]string{s}[0]
											} else {
												s = s + string(val.(dafny.Char))
											}
										}
									}()}
							}(), ReplicaKeys: func() []types.MultiRegionKey {
								var fieldValue []types.MultiRegionKey
								if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_ReplicaKeys().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MultiRegionConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MultiRegionConfiguration).Dtor_ReplicaKeys().UnwrapOr(nil).(dafny.Sequence)); ; {
									val, ok := i()
									if !ok {
										break
									}
									fieldValue = append(fieldValue, func() types.MultiRegionKey {

										return types.MultiRegionKey{
											Arn: func() *string {
												var s string
												if val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil) == nil {
													return nil
												}
												for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Arn().UnwrapOr(nil)); ; {
													val, ok := i()
													if !ok {
														return &[]string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}(), Region: func() *string {
												var s string
												if val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil) == nil {
													return nil
												}
												for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.MultiRegionKey).Dtor_Region().UnwrapOr(nil)); ; {
													val, ok := i()
													if !ok {
														return &[]string{s}[0]
													} else {
														s = s + string(val.(dafny.Char))
													}
												}
											}()}
									}())
								}
								return fieldValue
							}()}
					}(), PendingDeletionWindowInDays: func() *int32 {
						var i int32
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_PendingDeletionWindowInDays().UnwrapOr(nil) == nil {
							return nil
						}
						i = dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_PendingDeletionWindowInDays().UnwrapOr(nil).(int32)
						return &i
					}(), MacAlgorithms: func() []types.MacAlgorithmSpec {
						var fieldValue []types.MacAlgorithmSpec
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MacAlgorithms().UnwrapOr(nil) == nil {
							return nil
						}
						for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_MacAlgorithms().UnwrapOr(nil).(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								break
							}
							fieldValue = append(fieldValue, func() types.MacAlgorithmSpec {
								var u types.MacAlgorithmSpec

								inputEnum := val.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec)
								index := -1
								for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MacAlgorithmSpec_{}.AllSingletonConstructors()); ; {
									enum, ok := allEnums()
									if ok {
										index++
										if enum.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec).Equals(inputEnum) {
											break
										}
									}
								}
								return u.Values()[index]
							}())
						}
						return fieldValue
					}(), XksKeyConfiguration: func() *types.XksKeyConfigurationType {
						if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil) == nil {
							return nil
						}
						return &types.XksKeyConfigurationType{
							Id: func() *string {
								var s string
								if dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksKeyConfigurationType).Dtor_Id().UnwrapOr(nil) == nil {
									return nil
								}
								for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaKeyMetadata().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyMetadata).Dtor_XksKeyConfiguration().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksKeyConfigurationType).Dtor_Id().UnwrapOr(nil)); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}()}
			}(), ReplicaPolicy: func() *string {
				var s string
				if dafnyOutput.Dtor_ReplicaPolicy().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaPolicy().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), ReplicaTags: func() []types.Tag {
				var fieldValue []types.Tag
				if dafnyOutput.Dtor_ReplicaTags().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_ReplicaTags().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.Tag {

						return types.Tag{
							TagKey: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagKey()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), TagValue: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagValue()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}())
				}
				return fieldValue
			}()}
	}()

}

func RetireGrantInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.RetireGrantRequest) kms.RetireGrantInput {

	return func() kms.RetireGrantInput {

		return kms.RetireGrantInput{
			GrantToken: func() *string {
				var s string
				if dafnyInput.Dtor_GrantToken().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantToken().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyId: func() *string {
				var s string
				if dafnyInput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), GrantId: func() *string {
				var s string
				if dafnyInput.Dtor_GrantId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func RevokeGrantInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.RevokeGrantRequest) kms.RevokeGrantInput {

	return func() kms.RevokeGrantInput {

		return kms.RevokeGrantInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), GrantId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_GrantId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func RotateKeyOnDemandInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.RotateKeyOnDemandRequest) kms.RotateKeyOnDemandInput {

	return func() kms.RotateKeyOnDemandInput {

		return kms.RotateKeyOnDemandInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func RotateKeyOnDemandOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.RotateKeyOnDemandResponse) kms.RotateKeyOnDemandOutput {

	return func() kms.RotateKeyOnDemandOutput {

		return kms.RotateKeyOnDemandOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ScheduleKeyDeletionInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.ScheduleKeyDeletionRequest) kms.ScheduleKeyDeletionInput {

	return func() kms.ScheduleKeyDeletionInput {

		return kms.ScheduleKeyDeletionInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), PendingWindowInDays: func() *int32 {
				var i int32
				if dafnyInput.Dtor_PendingWindowInDays().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyInput.Dtor_PendingWindowInDays().UnwrapOr(nil).(int32)
				return &i
			}()}
	}()

}

func ScheduleKeyDeletionOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.ScheduleKeyDeletionResponse) kms.ScheduleKeyDeletionOutput {

	return func() kms.ScheduleKeyDeletionOutput {

		return kms.ScheduleKeyDeletionOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), DeletionDate: nil, KeyState: func() types.KeyState {
				var u types.KeyState
				//TODO: What to do if nil
				if dafnyOutput.Dtor_KeyState().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_KeyState().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.KeyState)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_KeyState_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.KeyState).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), PendingWindowInDays: func() *int32 {
				var i int32
				if dafnyOutput.Dtor_PendingWindowInDays().UnwrapOr(nil) == nil {
					return nil
				}
				i = dafnyOutput.Dtor_PendingWindowInDays().UnwrapOr(nil).(int32)
				return &i
			}()}
	}()

}

func SignInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.SignRequest) kms.SignInput {

	return func() kms.SignInput {

		return kms.SignInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Message: func() []byte {
				var b []byte
				if dafnyInput.Dtor_Message() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Message()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), MessageType: func() types.MessageType {
				var u types.MessageType
				//TODO: What to do if nil
				if dafnyInput.Dtor_MessageType().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_MessageType().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MessageType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MessageType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.MessageType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), SigningAlgorithm: func() types.SigningAlgorithmSpec {
				var u types.SigningAlgorithmSpec

				inputEnum := dafnyInput.Dtor_SigningAlgorithm()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_SigningAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func SignOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.SignResponse) kms.SignOutput {

	return func() kms.SignOutput {

		return kms.SignOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Signature: func() []byte {
				var b []byte
				if dafnyOutput.Dtor_Signature().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_Signature().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), SigningAlgorithm: func() types.SigningAlgorithmSpec {
				var u types.SigningAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_SigningAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_SigningAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_SigningAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func TagResourceInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.TagResourceRequest) kms.TagResourceInput {

	return func() kms.TagResourceInput {

		return kms.TagResourceInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Tags: func() []types.Tag {
				var fieldValue []types.Tag

				for i := dafny.Iterate(dafnyInput.Dtor_Tags().(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() types.Tag {

						return types.Tag{
							TagKey: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagKey()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}(), TagValue: func() *string {
								var s string

								for i := dafny.Iterate(val.(comamazonawskmsinternaldafnytypes.Tag).Dtor_TagValue()); ; {
									val, ok := i()
									if !ok {
										return &[]string{s}[0]
									} else {
										s = s + string(val.(dafny.Char))
									}
								}
							}()}
					}())
				}
				return fieldValue
			}()}
	}()

}

func UntagResourceInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.UntagResourceRequest) kms.UntagResourceInput {

	return func() kms.UntagResourceInput {

		return kms.UntagResourceInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), TagKeys: func() []string {
				var fieldValue []string

				for i := dafny.Iterate(dafnyInput.Dtor_TagKeys().(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}()}
	}()

}

func UpdateAliasInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.UpdateAliasRequest) kms.UpdateAliasInput {

	return func() kms.UpdateAliasInput {

		return kms.UpdateAliasInput{
			AliasName: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_AliasName()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), TargetKeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_TargetKeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func UpdateCustomKeyStoreInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.UpdateCustomKeyStoreRequest) kms.UpdateCustomKeyStoreInput {

	return func() kms.UpdateCustomKeyStoreInput {

		return kms.UpdateCustomKeyStoreInput{
			CustomKeyStoreId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_CustomKeyStoreId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), NewCustomKeyStoreName: func() *string {
				var s string
				if dafnyInput.Dtor_NewCustomKeyStoreName().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_NewCustomKeyStoreName().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), KeyStorePassword: func() *string {
				var s string
				if dafnyInput.Dtor_KeyStorePassword().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_KeyStorePassword().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), CloudHsmClusterId: func() *string {
				var s string
				if dafnyInput.Dtor_CloudHsmClusterId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_CloudHsmClusterId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), XksProxyUriEndpoint: func() *string {
				var s string
				if dafnyInput.Dtor_XksProxyUriEndpoint().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_XksProxyUriEndpoint().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), XksProxyUriPath: func() *string {
				var s string
				if dafnyInput.Dtor_XksProxyUriPath().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_XksProxyUriPath().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), XksProxyVpcEndpointServiceName: func() *string {
				var s string
				if dafnyInput.Dtor_XksProxyVpcEndpointServiceName().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_XksProxyVpcEndpointServiceName().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), XksProxyAuthenticationCredential: func() *types.XksProxyAuthenticationCredentialType {
				if dafnyInput.Dtor_XksProxyAuthenticationCredential().UnwrapOr(nil) == nil {
					return nil
				}
				return &types.XksProxyAuthenticationCredentialType{
					AccessKeyId: func() *string {
						var s string

						for i := dafny.Iterate(dafnyInput.Dtor_XksProxyAuthenticationCredential().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyAuthenticationCredentialType).Dtor_AccessKeyId()); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}(), RawSecretAccessKey: func() *string {
						var s string

						for i := dafny.Iterate(dafnyInput.Dtor_XksProxyAuthenticationCredential().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyAuthenticationCredentialType).Dtor_RawSecretAccessKey()); ; {
							val, ok := i()
							if !ok {
								return &[]string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}()}
			}(), XksProxyConnectivity: func() types.XksProxyConnectivityType {
				var u types.XksProxyConnectivityType
				//TODO: What to do if nil
				if dafnyInput.Dtor_XksProxyConnectivity().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_XksProxyConnectivity().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.XksProxyConnectivityType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_XksProxyConnectivityType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.XksProxyConnectivityType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func UpdateCustomKeyStoreOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.UpdateCustomKeyStoreResponse) kms.UpdateCustomKeyStoreOutput {

	return func() kms.UpdateCustomKeyStoreOutput {

		return kms.UpdateCustomKeyStoreOutput{}
	}()

}

func UpdateKeyDescriptionInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.UpdateKeyDescriptionRequest) kms.UpdateKeyDescriptionInput {

	return func() kms.UpdateKeyDescriptionInput {

		return kms.UpdateKeyDescriptionInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Description: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_Description()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func UpdatePrimaryRegionInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.UpdatePrimaryRegionRequest) kms.UpdatePrimaryRegionInput {

	return func() kms.UpdatePrimaryRegionInput {

		return kms.UpdatePrimaryRegionInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), PrimaryRegion: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_PrimaryRegion()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func VerifyInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.VerifyRequest) kms.VerifyInput {

	return func() kms.VerifyInput {

		return kms.VerifyInput{
			KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), Message: func() []byte {
				var b []byte
				if dafnyInput.Dtor_Message() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Message()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), MessageType: func() types.MessageType {
				var u types.MessageType
				//TODO: What to do if nil
				if dafnyInput.Dtor_MessageType().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyInput.Dtor_MessageType().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MessageType)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MessageType_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.MessageType).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), Signature: func() []byte {
				var b []byte
				if dafnyInput.Dtor_Signature() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Signature()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), SigningAlgorithm: func() types.SigningAlgorithmSpec {
				var u types.SigningAlgorithmSpec

				inputEnum := dafnyInput.Dtor_SigningAlgorithm()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_SigningAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func VerifyOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.VerifyResponse) kms.VerifyOutput {

	return func() kms.VerifyOutput {

		return kms.VerifyOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), SignatureValid: func() bool {
				var b bool
				if dafnyOutput.Dtor_SignatureValid().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_SignatureValid().UnwrapOr(nil).(bool)
				return b
			}(), SigningAlgorithm: func() types.SigningAlgorithmSpec {
				var u types.SigningAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_SigningAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_SigningAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_SigningAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.SigningAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func VerifyMacInput_FromDafny(dafnyInput comamazonawskmsinternaldafnytypes.VerifyMacRequest) kms.VerifyMacInput {

	return func() kms.VerifyMacInput {

		return kms.VerifyMacInput{
			Message: func() []byte {
				var b []byte
				if dafnyInput.Dtor_Message() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Message()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), KeyId: func() *string {
				var s string

				for i := dafny.Iterate(dafnyInput.Dtor_KeyId()); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), MacAlgorithm: func() types.MacAlgorithmSpec {
				var u types.MacAlgorithmSpec

				inputEnum := dafnyInput.Dtor_MacAlgorithm()
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MacAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}(), Mac: func() []byte {
				var b []byte
				if dafnyInput.Dtor_Mac() == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_Mac()); ; {
					val, ok := i()
					if !ok {
						return b
					} else {
						b = append(b, val.(byte))
					}
				}
			}(), GrantTokens: func() []string {
				var fieldValue []string
				if dafnyInput.Dtor_GrantTokens().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyInput.Dtor_GrantTokens().UnwrapOr(nil).(dafny.Sequence)); ; {
					val, ok := i()
					if !ok {
						break
					}
					fieldValue = append(fieldValue, func() string {
						var s string

						for i := dafny.Iterate(val.(dafny.Sequence)); ; {
							val, ok := i()
							if !ok {
								return []string{s}[0]
							} else {
								s = s + string(val.(dafny.Char))
							}
						}
					}())
				}
				return fieldValue
			}(), DryRun: func() *bool {
				var b bool
				if dafnyInput.Dtor_DryRun().UnwrapOr(nil) == nil {
					return nil
				}
				b = dafnyInput.Dtor_DryRun().UnwrapOr(nil).(bool)
				return &b
			}()}
	}()

}

func VerifyMacOutput_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.VerifyMacResponse) kms.VerifyMacOutput {

	return func() kms.VerifyMacOutput {

		return kms.VerifyMacOutput{
			KeyId: func() *string {
				var s string
				if dafnyOutput.Dtor_KeyId().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_KeyId().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}(), MacValid: func() bool {
				var b bool
				if dafnyOutput.Dtor_MacValid().UnwrapOr(nil) == nil {
					return b
				}
				b = dafnyOutput.Dtor_MacValid().UnwrapOr(nil).(bool)
				return b
			}(), MacAlgorithm: func() types.MacAlgorithmSpec {
				var u types.MacAlgorithmSpec
				//TODO: What to do if nil
				if dafnyOutput.Dtor_MacAlgorithm().UnwrapOr(nil) == nil {
					return u
				}
				inputEnum := dafnyOutput.Dtor_MacAlgorithm().UnwrapOr(nil).(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec)
				index := -1
				for allEnums := dafny.Iterate(comamazonawskmsinternaldafnytypes.CompanionStruct_MacAlgorithmSpec_{}.AllSingletonConstructors()); ; {
					enum, ok := allEnums()
					if ok {
						index++
						if enum.(comamazonawskmsinternaldafnytypes.MacAlgorithmSpec).Equals(inputEnum) {
							break
						}
					}
				}
				return u.Values()[index]
			}()}
	}()

}

func CloudHsmClusterNotRelatedException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CloudHsmClusterNotRelatedException {
	return func() types.CloudHsmClusterNotRelatedException {

		return types.CloudHsmClusterNotRelatedException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func InvalidGrantIdException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.InvalidGrantIdException {
	return func() types.InvalidGrantIdException {

		return types.InvalidGrantIdException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func TagException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.TagException {
	return func() types.TagException {

		return types.TagException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CustomKeyStoreHasCMKsException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CustomKeyStoreHasCMKsException {
	return func() types.CustomKeyStoreHasCMKsException {

		return types.CustomKeyStoreHasCMKsException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CloudHsmClusterNotFoundException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CloudHsmClusterNotFoundException {
	return func() types.CloudHsmClusterNotFoundException {

		return types.CloudHsmClusterNotFoundException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func IncorrectTrustAnchorException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.IncorrectTrustAnchorException {
	return func() types.IncorrectTrustAnchorException {

		return types.IncorrectTrustAnchorException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DependencyTimeoutException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.DependencyTimeoutException {
	return func() types.DependencyTimeoutException {

		return types.DependencyTimeoutException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func KMSInvalidMacException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.KMSInvalidMacException {
	return func() types.KMSInvalidMacException {

		return types.KMSInvalidMacException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func InvalidImportTokenException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.InvalidImportTokenException {
	return func() types.InvalidImportTokenException {

		return types.InvalidImportTokenException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func InvalidMarkerException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.InvalidMarkerException {
	return func() types.InvalidMarkerException {

		return types.InvalidMarkerException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CustomKeyStoreInvalidStateException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CustomKeyStoreInvalidStateException {
	return func() types.CustomKeyStoreInvalidStateException {

		return types.CustomKeyStoreInvalidStateException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CloudHsmClusterNotActiveException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CloudHsmClusterNotActiveException {
	return func() types.CloudHsmClusterNotActiveException {

		return types.CloudHsmClusterNotActiveException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func InvalidGrantTokenException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.InvalidGrantTokenException {
	return func() types.InvalidGrantTokenException {

		return types.InvalidGrantTokenException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksKeyAlreadyInUseException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksKeyAlreadyInUseException {
	return func() types.XksKeyAlreadyInUseException {

		return types.XksKeyAlreadyInUseException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func KMSInvalidStateException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.KMSInvalidStateException {
	return func() types.KMSInvalidStateException {

		return types.KMSInvalidStateException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyUriEndpointInUseException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyUriEndpointInUseException {
	return func() types.XksProxyUriEndpointInUseException {

		return types.XksProxyUriEndpointInUseException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CustomKeyStoreNameInUseException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CustomKeyStoreNameInUseException {
	return func() types.CustomKeyStoreNameInUseException {

		return types.CustomKeyStoreNameInUseException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func KeyUnavailableException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.KeyUnavailableException {
	return func() types.KeyUnavailableException {

		return types.KeyUnavailableException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func IncorrectKeyException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.IncorrectKeyException {
	return func() types.IncorrectKeyException {

		return types.IncorrectKeyException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ExpiredImportTokenException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.ExpiredImportTokenException {
	return func() types.ExpiredImportTokenException {

		return types.ExpiredImportTokenException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DisabledException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.DisabledException {
	return func() types.DisabledException {

		return types.DisabledException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyInvalidResponseException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyInvalidResponseException {
	return func() types.XksProxyInvalidResponseException {

		return types.XksProxyInvalidResponseException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyIncorrectAuthenticationCredentialException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyIncorrectAuthenticationCredentialException {
	return func() types.XksProxyIncorrectAuthenticationCredentialException {

		return types.XksProxyIncorrectAuthenticationCredentialException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyVpcEndpointServiceNotFoundException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyVpcEndpointServiceNotFoundException {
	return func() types.XksProxyVpcEndpointServiceNotFoundException {

		return types.XksProxyVpcEndpointServiceNotFoundException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CloudHsmClusterInUseException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CloudHsmClusterInUseException {
	return func() types.CloudHsmClusterInUseException {

		return types.CloudHsmClusterInUseException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func InvalidArnException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.InvalidArnException {
	return func() types.InvalidArnException {

		return types.InvalidArnException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func UnsupportedOperationException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.UnsupportedOperationException {
	return func() types.UnsupportedOperationException {

		return types.UnsupportedOperationException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CloudHsmClusterInvalidConfigurationException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CloudHsmClusterInvalidConfigurationException {
	return func() types.CloudHsmClusterInvalidConfigurationException {

		return types.CloudHsmClusterInvalidConfigurationException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func InvalidKeyUsageException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.InvalidKeyUsageException {
	return func() types.InvalidKeyUsageException {

		return types.InvalidKeyUsageException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func CustomKeyStoreNotFoundException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.CustomKeyStoreNotFoundException {
	return func() types.CustomKeyStoreNotFoundException {

		return types.CustomKeyStoreNotFoundException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func InvalidAliasNameException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.InvalidAliasNameException {
	return func() types.InvalidAliasNameException {

		return types.InvalidAliasNameException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyUriInUseException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyUriInUseException {
	return func() types.XksProxyUriInUseException {

		return types.XksProxyUriInUseException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyVpcEndpointServiceInUseException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyVpcEndpointServiceInUseException {
	return func() types.XksProxyVpcEndpointServiceInUseException {

		return types.XksProxyVpcEndpointServiceInUseException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func AlreadyExistsException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.AlreadyExistsException {
	return func() types.AlreadyExistsException {

		return types.AlreadyExistsException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func IncorrectKeyMaterialException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.IncorrectKeyMaterialException {
	return func() types.IncorrectKeyMaterialException {

		return types.IncorrectKeyMaterialException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func NotFoundException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.NotFoundException {
	return func() types.NotFoundException {

		return types.NotFoundException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func ConflictException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.ConflictException {
	return func() types.ConflictException {

		return types.ConflictException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func LimitExceededException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.LimitExceededException {
	return func() types.LimitExceededException {

		return types.LimitExceededException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func DryRunOperationException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.DryRunOperationException {
	return func() types.DryRunOperationException {

		return types.DryRunOperationException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyUriUnreachableException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyUriUnreachableException {
	return func() types.XksProxyUriUnreachableException {

		return types.XksProxyUriUnreachableException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func KMSInternalException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.KMSInternalException {
	return func() types.KMSInternalException {

		return types.KMSInternalException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func InvalidCiphertextException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.InvalidCiphertextException {
	return func() types.InvalidCiphertextException {

		return types.InvalidCiphertextException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func KMSInvalidSignatureException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.KMSInvalidSignatureException {
	return func() types.KMSInvalidSignatureException {

		return types.KMSInvalidSignatureException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksKeyInvalidConfigurationException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksKeyInvalidConfigurationException {
	return func() types.XksKeyInvalidConfigurationException {

		return types.XksKeyInvalidConfigurationException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func MalformedPolicyDocumentException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.MalformedPolicyDocumentException {
	return func() types.MalformedPolicyDocumentException {

		return types.MalformedPolicyDocumentException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyInvalidConfigurationException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyInvalidConfigurationException {
	return func() types.XksProxyInvalidConfigurationException {

		return types.XksProxyInvalidConfigurationException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksProxyVpcEndpointServiceInvalidConfigurationException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksProxyVpcEndpointServiceInvalidConfigurationException {
	return func() types.XksProxyVpcEndpointServiceInvalidConfigurationException {

		return types.XksProxyVpcEndpointServiceInvalidConfigurationException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func XksKeyNotFoundException_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) types.XksKeyNotFoundException {
	return func() types.XksKeyNotFoundException {

		return types.XksKeyNotFoundException{
			Message: func() *string {
				var s string
				if dafnyOutput.Dtor_message().UnwrapOr(nil) == nil {
					return nil
				}
				for i := dafny.Iterate(dafnyOutput.Dtor_message().UnwrapOr(nil)); ; {
					val, ok := i()
					if !ok {
						return &[]string{s}[0]
					} else {
						s = s + string(val.(dafny.Char))
					}
				}
			}()}
	}()

}

func OpaqueError_Output_FromDafny(dafnyOutput comamazonawskmsinternaldafnytypes.Error) error {
	return fmt.Errorf(fmt.Sprintf("%v", dafnyOutput.Dtor_obj()))
}

func Error_FromDafny(err comamazonawskmsinternaldafnytypes.Error) error {
	// Service Errors
	if err.Is_CloudHsmClusterNotRelatedException() {
		e := CloudHsmClusterNotRelatedException_FromDafny(err)
		return &e
	}

	if err.Is_InvalidGrantIdException() {
		e := InvalidGrantIdException_FromDafny(err)
		return &e
	}

	if err.Is_TagException() {
		e := TagException_FromDafny(err)
		return &e
	}

	if err.Is_CustomKeyStoreHasCMKsException() {
		e := CustomKeyStoreHasCMKsException_FromDafny(err)
		return &e
	}

	if err.Is_CloudHsmClusterNotFoundException() {
		e := CloudHsmClusterNotFoundException_FromDafny(err)
		return &e
	}

	if err.Is_IncorrectTrustAnchorException() {
		e := IncorrectTrustAnchorException_FromDafny(err)
		return &e
	}

	if err.Is_DependencyTimeoutException() {
		e := DependencyTimeoutException_FromDafny(err)
		return &e
	}

	if err.Is_KMSInvalidMacException() {
		e := KMSInvalidMacException_FromDafny(err)
		return &e
	}

	if err.Is_InvalidImportTokenException() {
		e := InvalidImportTokenException_FromDafny(err)
		return &e
	}

	if err.Is_InvalidMarkerException() {
		e := InvalidMarkerException_FromDafny(err)
		return &e
	}

	if err.Is_CustomKeyStoreInvalidStateException() {
		e := CustomKeyStoreInvalidStateException_FromDafny(err)
		return &e
	}

	if err.Is_CloudHsmClusterNotActiveException() {
		e := CloudHsmClusterNotActiveException_FromDafny(err)
		return &e
	}

	if err.Is_InvalidGrantTokenException() {
		e := InvalidGrantTokenException_FromDafny(err)
		return &e
	}

	if err.Is_XksKeyAlreadyInUseException() {
		e := XksKeyAlreadyInUseException_FromDafny(err)
		return &e
	}

	if err.Is_KMSInvalidStateException() {
		e := KMSInvalidStateException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyUriEndpointInUseException() {
		e := XksProxyUriEndpointInUseException_FromDafny(err)
		return &e
	}

	if err.Is_CustomKeyStoreNameInUseException() {
		e := CustomKeyStoreNameInUseException_FromDafny(err)
		return &e
	}

	if err.Is_KeyUnavailableException() {
		e := KeyUnavailableException_FromDafny(err)
		return &e
	}

	if err.Is_IncorrectKeyException() {
		e := IncorrectKeyException_FromDafny(err)
		return &e
	}

	if err.Is_ExpiredImportTokenException() {
		e := ExpiredImportTokenException_FromDafny(err)
		return &e
	}

	if err.Is_DisabledException() {
		e := DisabledException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyInvalidResponseException() {
		e := XksProxyInvalidResponseException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyIncorrectAuthenticationCredentialException() {
		e := XksProxyIncorrectAuthenticationCredentialException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyVpcEndpointServiceNotFoundException() {
		e := XksProxyVpcEndpointServiceNotFoundException_FromDafny(err)
		return &e
	}

	if err.Is_CloudHsmClusterInUseException() {
		e := CloudHsmClusterInUseException_FromDafny(err)
		return &e
	}

	if err.Is_InvalidArnException() {
		e := InvalidArnException_FromDafny(err)
		return &e
	}

	if err.Is_UnsupportedOperationException() {
		e := UnsupportedOperationException_FromDafny(err)
		return &e
	}

	if err.Is_CloudHsmClusterInvalidConfigurationException() {
		e := CloudHsmClusterInvalidConfigurationException_FromDafny(err)
		return &e
	}

	if err.Is_InvalidKeyUsageException() {
		e := InvalidKeyUsageException_FromDafny(err)
		return &e
	}

	if err.Is_CustomKeyStoreNotFoundException() {
		e := CustomKeyStoreNotFoundException_FromDafny(err)
		return &e
	}

	if err.Is_InvalidAliasNameException() {
		e := InvalidAliasNameException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyUriInUseException() {
		e := XksProxyUriInUseException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyVpcEndpointServiceInUseException() {
		e := XksProxyVpcEndpointServiceInUseException_FromDafny(err)
		return &e
	}

	if err.Is_AlreadyExistsException() {
		e := AlreadyExistsException_FromDafny(err)
		return &e
	}

	if err.Is_IncorrectKeyMaterialException() {
		e := IncorrectKeyMaterialException_FromDafny(err)
		return &e
	}

	if err.Is_NotFoundException() {
		e := NotFoundException_FromDafny(err)
		return &e
	}

	if err.Is_ConflictException() {
		e := ConflictException_FromDafny(err)
		return &e
	}

	if err.Is_LimitExceededException() {
		e := LimitExceededException_FromDafny(err)
		return &e
	}

	if err.Is_DryRunOperationException() {
		e := DryRunOperationException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyUriUnreachableException() {
		e := XksProxyUriUnreachableException_FromDafny(err)
		return &e
	}

	if err.Is_KMSInternalException() {
		e := KMSInternalException_FromDafny(err)
		return &e
	}

	if err.Is_InvalidCiphertextException() {
		e := InvalidCiphertextException_FromDafny(err)
		return &e
	}

	if err.Is_KMSInvalidSignatureException() {
		e := KMSInvalidSignatureException_FromDafny(err)
		return &e
	}

	if err.Is_XksKeyInvalidConfigurationException() {
		e := XksKeyInvalidConfigurationException_FromDafny(err)
		return &e
	}

	if err.Is_MalformedPolicyDocumentException() {
		e := MalformedPolicyDocumentException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyInvalidConfigurationException() {
		e := XksProxyInvalidConfigurationException_FromDafny(err)
		return &e
	}

	if err.Is_XksProxyVpcEndpointServiceInvalidConfigurationException() {
		e := XksProxyVpcEndpointServiceInvalidConfigurationException_FromDafny(err)
		return &e
	}

	if err.Is_XksKeyNotFoundException() {
		e := XksKeyNotFoundException_FromDafny(err)
		return &e
	}

	return OpaqueError_Output_FromDafny(err)
}
